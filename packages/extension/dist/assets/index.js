var Se=Object.defineProperty;var Ee=(e,t,n)=>t in e?Se(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;var ye=(e,t,n)=>Ee(e,typeof t!="symbol"?t+"":t,n);import{getContext as getContext$1,extension_settings}from"../../../../../../../extensions.js";import{loadWorldInfo,createWorldInfoEntry,saveWorldInfo}from"../../../../../../../world-info.js";import{getUserAvatar,user_avatar}from"../../../../../../../personas.js";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))r(s);new MutationObserver(s=>{for(const o of s)if(o.type==="childList")for(const i of o.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&r(i)}).observe(document,{childList:!0,subtree:!0});function n(s){const o={};return s.integrity&&(o.integrity=s.integrity),s.referrerPolicy&&(o.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?o.credentials="include":s.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function r(s){if(s.ep)return;s.ep=!0;const o=n(s);fetch(s.href,o)}})();/**
* @vue/shared v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**//*! #__NO_SIDE_EFFECTS__ */function makeMap(e){const t=Object.create(null);for(const n of e.split(","))t[n]=1;return n=>n in t}const EMPTY_OBJ={},EMPTY_ARR=[],NOOP=()=>{},NO=()=>!1,isOn=e=>e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&(e.charCodeAt(2)>122||e.charCodeAt(2)<97),isModelListener=e=>e.startsWith("onUpdate:"),extend=Object.assign,remove=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},hasOwnProperty$7=Object.prototype.hasOwnProperty,hasOwn=(e,t)=>hasOwnProperty$7.call(e,t),isArray$1=Array.isArray,isMap=e=>toTypeString(e)==="[object Map]",isSet=e=>toTypeString(e)==="[object Set]",isFunction$1=e=>typeof e=="function",isString=e=>typeof e=="string",isSymbol$1=e=>typeof e=="symbol",isObject$1=e=>e!==null&&typeof e=="object",isPromise=e=>(isObject$1(e)||isFunction$1(e))&&isFunction$1(e.then)&&isFunction$1(e.catch),objectToString$1=Object.prototype.toString,toTypeString=e=>objectToString$1.call(e),toRawType=e=>toTypeString(e).slice(8,-1),isPlainObject$1=e=>toTypeString(e)==="[object Object]",isIntegerKey=e=>isString(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,isReservedProp=makeMap(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),cacheStringFunction=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},camelizeRE=/-(\w)/g,camelize=cacheStringFunction(e=>e.replace(camelizeRE,(t,n)=>n?n.toUpperCase():"")),hyphenateRE=/\B([A-Z])/g,hyphenate=cacheStringFunction(e=>e.replace(hyphenateRE,"-$1").toLowerCase()),capitalize=cacheStringFunction(e=>e.charAt(0).toUpperCase()+e.slice(1)),toHandlerKey=cacheStringFunction(e=>e?`on${capitalize(e)}`:""),hasChanged=(e,t)=>!Object.is(e,t),invokeArrayFns=(e,...t)=>{for(let n=0;n<e.length;n++)e[n](...t)},def=(e,t,n,r=!1)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,writable:r,value:n})},looseToNumber=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let _globalThis;const getGlobalThis=()=>_globalThis||(_globalThis=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function normalizeStyle(e){if(isArray$1(e)){const t={};for(let n=0;n<e.length;n++){const r=e[n],s=isString(r)?parseStringStyle(r):normalizeStyle(r);if(s)for(const o in s)t[o]=s[o]}return t}else if(isString(e)||isObject$1(e))return e}const listDelimiterRE=/;(?![^(]*\))/g,propertyDelimiterRE=/:([^]+)/,styleCommentRE=/\/\*[^]*?\*\//g;function parseStringStyle(e){const t={};return e.replace(styleCommentRE,"").split(listDelimiterRE).forEach(n=>{if(n){const r=n.split(propertyDelimiterRE);r.length>1&&(t[r[0].trim()]=r[1].trim())}}),t}function normalizeClass(e){let t="";if(isString(e))t=e;else if(isArray$1(e))for(let n=0;n<e.length;n++){const r=normalizeClass(e[n]);r&&(t+=r+" ")}else if(isObject$1(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}const specialBooleanAttrs="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",isSpecialBooleanAttr=makeMap(specialBooleanAttrs);function includeBooleanAttr(e){return!!e||e===""}const isRef$1=e=>!!(e&&e.__v_isRef===!0),toDisplayString=e=>isString(e)?e:e==null?"":isArray$1(e)||isObject$1(e)&&(e.toString===objectToString$1||!isFunction$1(e.toString))?isRef$1(e)?toDisplayString(e.value):JSON.stringify(e,replacer,2):String(e),replacer=(e,t)=>isRef$1(t)?replacer(e,t.value):isMap(t)?{[`Map(${t.size})`]:[...t.entries()].reduce((n,[r,s],o)=>(n[stringifySymbol(r,o)+" =>"]=s,n),{})}:isSet(t)?{[`Set(${t.size})`]:[...t.values()].map(n=>stringifySymbol(n))}:isSymbol$1(t)?stringifySymbol(t):isObject$1(t)&&!isArray$1(t)&&!isPlainObject$1(t)?String(t):t,stringifySymbol=(e,t="")=>{var n;return isSymbol$1(e)?`Symbol(${(n=e.description)!=null?n:t})`:e};/**
* @vue/reactivity v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let activeEffectScope;class EffectScope{constructor(t=!1){this.detached=t,this._active=!0,this.effects=[],this.cleanups=[],this._isPaused=!1,this.parent=activeEffectScope,!t&&activeEffectScope&&(this.index=(activeEffectScope.scopes||(activeEffectScope.scopes=[])).push(this)-1)}get active(){return this._active}pause(){if(this._active){this._isPaused=!0;let t,n;if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].pause();for(t=0,n=this.effects.length;t<n;t++)this.effects[t].pause()}}resume(){if(this._active&&this._isPaused){this._isPaused=!1;let t,n;if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].resume();for(t=0,n=this.effects.length;t<n;t++)this.effects[t].resume()}}run(t){if(this._active){const n=activeEffectScope;try{return activeEffectScope=this,t()}finally{activeEffectScope=n}}}on(){activeEffectScope=this}off(){activeEffectScope=this.parent}stop(t){if(this._active){this._active=!1;let n,r;for(n=0,r=this.effects.length;n<r;n++)this.effects[n].stop();for(this.effects.length=0,n=0,r=this.cleanups.length;n<r;n++)this.cleanups[n]();if(this.cleanups.length=0,this.scopes){for(n=0,r=this.scopes.length;n<r;n++)this.scopes[n].stop(!0);this.scopes.length=0}if(!this.detached&&this.parent&&!t){const s=this.parent.scopes.pop();s&&s!==this&&(this.parent.scopes[this.index]=s,s.index=this.index)}this.parent=void 0}}}function effectScope(e){return new EffectScope(e)}function getCurrentScope(){return activeEffectScope}function onScopeDispose(e,t=!1){activeEffectScope&&activeEffectScope.cleanups.push(e)}let activeSub;const pausedQueueEffects=new WeakSet;class ReactiveEffect{constructor(t){this.fn=t,this.deps=void 0,this.depsTail=void 0,this.flags=5,this.next=void 0,this.cleanup=void 0,this.scheduler=void 0,activeEffectScope&&activeEffectScope.active&&activeEffectScope.effects.push(this)}pause(){this.flags|=64}resume(){this.flags&64&&(this.flags&=-65,pausedQueueEffects.has(this)&&(pausedQueueEffects.delete(this),this.trigger()))}notify(){this.flags&2&&!(this.flags&32)||this.flags&8||batch(this)}run(){if(!(this.flags&1))return this.fn();this.flags|=2,cleanupEffect(this),prepareDeps(this);const t=activeSub,n=shouldTrack;activeSub=this,shouldTrack=!0;try{return this.fn()}finally{cleanupDeps(this),activeSub=t,shouldTrack=n,this.flags&=-3}}stop(){if(this.flags&1){for(let t=this.deps;t;t=t.nextDep)removeSub(t);this.deps=this.depsTail=void 0,cleanupEffect(this),this.onStop&&this.onStop(),this.flags&=-2}}trigger(){this.flags&64?pausedQueueEffects.add(this):this.scheduler?this.scheduler():this.runIfDirty()}runIfDirty(){isDirty(this)&&this.run()}get dirty(){return isDirty(this)}}let batchDepth=0,batchedSub,batchedComputed;function batch(e,t=!1){if(e.flags|=8,t){e.next=batchedComputed,batchedComputed=e;return}e.next=batchedSub,batchedSub=e}function startBatch(){batchDepth++}function endBatch(){if(--batchDepth>0)return;if(batchedComputed){let t=batchedComputed;for(batchedComputed=void 0;t;){const n=t.next;t.next=void 0,t.flags&=-9,t=n}}let e;for(;batchedSub;){let t=batchedSub;for(batchedSub=void 0;t;){const n=t.next;if(t.next=void 0,t.flags&=-9,t.flags&1)try{t.trigger()}catch(r){e||(e=r)}t=n}}if(e)throw e}function prepareDeps(e){for(let t=e.deps;t;t=t.nextDep)t.version=-1,t.prevActiveLink=t.dep.activeLink,t.dep.activeLink=t}function cleanupDeps(e){let t,n=e.depsTail,r=n;for(;r;){const s=r.prevDep;r.version===-1?(r===n&&(n=s),removeSub(r),removeDep(r)):t=r,r.dep.activeLink=r.prevActiveLink,r.prevActiveLink=void 0,r=s}e.deps=t,e.depsTail=n}function isDirty(e){for(let t=e.deps;t;t=t.nextDep)if(t.dep.version!==t.version||t.dep.computed&&(refreshComputed(t.dep.computed)||t.dep.version!==t.version))return!0;return!!e._dirty}function refreshComputed(e){if(e.flags&4&&!(e.flags&16)||(e.flags&=-17,e.globalVersion===globalVersion))return;e.globalVersion=globalVersion;const t=e.dep;if(e.flags|=2,t.version>0&&!e.isSSR&&e.deps&&!isDirty(e)){e.flags&=-3;return}const n=activeSub,r=shouldTrack;activeSub=e,shouldTrack=!0;try{prepareDeps(e);const s=e.fn(e._value);(t.version===0||hasChanged(s,e._value))&&(e._value=s,t.version++)}catch(s){throw t.version++,s}finally{activeSub=n,shouldTrack=r,cleanupDeps(e),e.flags&=-3}}function removeSub(e,t=!1){const{dep:n,prevSub:r,nextSub:s}=e;if(r&&(r.nextSub=s,e.prevSub=void 0),s&&(s.prevSub=r,e.nextSub=void 0),n.subs===e&&(n.subs=r,!r&&n.computed)){n.computed.flags&=-5;for(let o=n.computed.deps;o;o=o.nextDep)removeSub(o,!0)}!t&&!--n.sc&&n.map&&n.map.delete(n.key)}function removeDep(e){const{prevDep:t,nextDep:n}=e;t&&(t.nextDep=n,e.prevDep=void 0),n&&(n.prevDep=t,e.nextDep=void 0)}let shouldTrack=!0;const trackStack=[];function pauseTracking(){trackStack.push(shouldTrack),shouldTrack=!1}function resetTracking(){const e=trackStack.pop();shouldTrack=e===void 0?!0:e}function cleanupEffect(e){const{cleanup:t}=e;if(e.cleanup=void 0,t){const n=activeSub;activeSub=void 0;try{t()}finally{activeSub=n}}}let globalVersion=0;class Link{constructor(t,n){this.sub=t,this.dep=n,this.version=n.version,this.nextDep=this.prevDep=this.nextSub=this.prevSub=this.prevActiveLink=void 0}}class Dep{constructor(t){this.computed=t,this.version=0,this.activeLink=void 0,this.subs=void 0,this.map=void 0,this.key=void 0,this.sc=0}track(t){if(!activeSub||!shouldTrack||activeSub===this.computed)return;let n=this.activeLink;if(n===void 0||n.sub!==activeSub)n=this.activeLink=new Link(activeSub,this),activeSub.deps?(n.prevDep=activeSub.depsTail,activeSub.depsTail.nextDep=n,activeSub.depsTail=n):activeSub.deps=activeSub.depsTail=n,addSub(n);else if(n.version===-1&&(n.version=this.version,n.nextDep)){const r=n.nextDep;r.prevDep=n.prevDep,n.prevDep&&(n.prevDep.nextDep=r),n.prevDep=activeSub.depsTail,n.nextDep=void 0,activeSub.depsTail.nextDep=n,activeSub.depsTail=n,activeSub.deps===n&&(activeSub.deps=r)}return n}trigger(t){this.version++,globalVersion++,this.notify(t)}notify(t){startBatch();try{for(let n=this.subs;n;n=n.prevSub)n.sub.notify()&&n.sub.dep.notify()}finally{endBatch()}}}function addSub(e){if(e.dep.sc++,e.sub.flags&4){const t=e.dep.computed;if(t&&!e.dep.subs){t.flags|=20;for(let r=t.deps;r;r=r.nextDep)addSub(r)}const n=e.dep.subs;n!==e&&(e.prevSub=n,n&&(n.nextSub=e)),e.dep.subs=e}}const targetMap=new WeakMap,ITERATE_KEY=Symbol(""),MAP_KEY_ITERATE_KEY=Symbol(""),ARRAY_ITERATE_KEY=Symbol("");function track(e,t,n){if(shouldTrack&&activeSub){let r=targetMap.get(e);r||targetMap.set(e,r=new Map);let s=r.get(n);s||(r.set(n,s=new Dep),s.map=r,s.key=n),s.track()}}function trigger(e,t,n,r,s,o){const i=targetMap.get(e);if(!i){globalVersion++;return}const a=c=>{c&&c.trigger()};if(startBatch(),t==="clear")i.forEach(a);else{const c=isArray$1(e),d=c&&isIntegerKey(n);if(c&&n==="length"){const u=Number(r);i.forEach((h,b)=>{(b==="length"||b===ARRAY_ITERATE_KEY||!isSymbol$1(b)&&b>=u)&&a(h)})}else switch((n!==void 0||i.has(void 0))&&a(i.get(n)),d&&a(i.get(ARRAY_ITERATE_KEY)),t){case"add":c?d&&a(i.get("length")):(a(i.get(ITERATE_KEY)),isMap(e)&&a(i.get(MAP_KEY_ITERATE_KEY)));break;case"delete":c||(a(i.get(ITERATE_KEY)),isMap(e)&&a(i.get(MAP_KEY_ITERATE_KEY)));break;case"set":isMap(e)&&a(i.get(ITERATE_KEY));break}}endBatch()}function getDepFromReactive(e,t){const n=targetMap.get(e);return n&&n.get(t)}function reactiveReadArray(e){const t=toRaw(e);return t===e?t:(track(t,"iterate",ARRAY_ITERATE_KEY),isShallow(e)?t:t.map(toReactive))}function shallowReadArray(e){return track(e=toRaw(e),"iterate",ARRAY_ITERATE_KEY),e}const arrayInstrumentations={__proto__:null,[Symbol.iterator](){return iterator(this,Symbol.iterator,toReactive)},concat(...e){return reactiveReadArray(this).concat(...e.map(t=>isArray$1(t)?reactiveReadArray(t):t))},entries(){return iterator(this,"entries",e=>(e[1]=toReactive(e[1]),e))},every(e,t){return apply$1(this,"every",e,t,void 0,arguments)},filter(e,t){return apply$1(this,"filter",e,t,n=>n.map(toReactive),arguments)},find(e,t){return apply$1(this,"find",e,t,toReactive,arguments)},findIndex(e,t){return apply$1(this,"findIndex",e,t,void 0,arguments)},findLast(e,t){return apply$1(this,"findLast",e,t,toReactive,arguments)},findLastIndex(e,t){return apply$1(this,"findLastIndex",e,t,void 0,arguments)},forEach(e,t){return apply$1(this,"forEach",e,t,void 0,arguments)},includes(...e){return searchProxy(this,"includes",e)},indexOf(...e){return searchProxy(this,"indexOf",e)},join(e){return reactiveReadArray(this).join(e)},lastIndexOf(...e){return searchProxy(this,"lastIndexOf",e)},map(e,t){return apply$1(this,"map",e,t,void 0,arguments)},pop(){return noTracking(this,"pop")},push(...e){return noTracking(this,"push",e)},reduce(e,...t){return reduce(this,"reduce",e,t)},reduceRight(e,...t){return reduce(this,"reduceRight",e,t)},shift(){return noTracking(this,"shift")},some(e,t){return apply$1(this,"some",e,t,void 0,arguments)},splice(...e){return noTracking(this,"splice",e)},toReversed(){return reactiveReadArray(this).toReversed()},toSorted(e){return reactiveReadArray(this).toSorted(e)},toSpliced(...e){return reactiveReadArray(this).toSpliced(...e)},unshift(...e){return noTracking(this,"unshift",e)},values(){return iterator(this,"values",toReactive)}};function iterator(e,t,n){const r=shallowReadArray(e),s=r[t]();return r!==e&&!isShallow(e)&&(s._next=s.next,s.next=()=>{const o=s._next();return o.value&&(o.value=n(o.value)),o}),s}const arrayProto$1=Array.prototype;function apply$1(e,t,n,r,s,o){const i=shallowReadArray(e),a=i!==e&&!isShallow(e),c=i[t];if(c!==arrayProto$1[t]){const h=c.apply(e,o);return a?toReactive(h):h}let d=n;i!==e&&(a?d=function(h,b){return n.call(this,toReactive(h),b,e)}:n.length>2&&(d=function(h,b){return n.call(this,h,b,e)}));const u=c.call(i,d,r);return a&&s?s(u):u}function reduce(e,t,n,r){const s=shallowReadArray(e);let o=n;return s!==e&&(isShallow(e)?n.length>3&&(o=function(i,a,c){return n.call(this,i,a,c,e)}):o=function(i,a,c){return n.call(this,i,toReactive(a),c,e)}),s[t](o,...r)}function searchProxy(e,t,n){const r=toRaw(e);track(r,"iterate",ARRAY_ITERATE_KEY);const s=r[t](...n);return(s===-1||s===!1)&&isProxy(n[0])?(n[0]=toRaw(n[0]),r[t](...n)):s}function noTracking(e,t,n=[]){pauseTracking(),startBatch();const r=toRaw(e)[t].apply(e,n);return endBatch(),resetTracking(),r}const isNonTrackableKeys=makeMap("__proto__,__v_isRef,__isVue"),builtInSymbols=new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(isSymbol$1));function hasOwnProperty$6(e){isSymbol$1(e)||(e=String(e));const t=toRaw(this);return track(t,"has",e),t.hasOwnProperty(e)}class BaseReactiveHandler{constructor(t=!1,n=!1){this._isReadonly=t,this._isShallow=n}get(t,n,r){if(n==="__v_skip")return t.__v_skip;const s=this._isReadonly,o=this._isShallow;if(n==="__v_isReactive")return!s;if(n==="__v_isReadonly")return s;if(n==="__v_isShallow")return o;if(n==="__v_raw")return r===(s?o?shallowReadonlyMap:readonlyMap:o?shallowReactiveMap:reactiveMap).get(t)||Object.getPrototypeOf(t)===Object.getPrototypeOf(r)?t:void 0;const i=isArray$1(t);if(!s){let c;if(i&&(c=arrayInstrumentations[n]))return c;if(n==="hasOwnProperty")return hasOwnProperty$6}const a=Reflect.get(t,n,isRef(t)?t:r);return(isSymbol$1(n)?builtInSymbols.has(n):isNonTrackableKeys(n))||(s||track(t,"get",n),o)?a:isRef(a)?i&&isIntegerKey(n)?a:a.value:isObject$1(a)?s?readonly(a):reactive(a):a}}class MutableReactiveHandler extends BaseReactiveHandler{constructor(t=!1){super(!1,t)}set(t,n,r,s){let o=t[n];if(!this._isShallow){const c=isReadonly(o);if(!isShallow(r)&&!isReadonly(r)&&(o=toRaw(o),r=toRaw(r)),!isArray$1(t)&&isRef(o)&&!isRef(r))return c?!1:(o.value=r,!0)}const i=isArray$1(t)&&isIntegerKey(n)?Number(n)<t.length:hasOwn(t,n),a=Reflect.set(t,n,r,isRef(t)?t:s);return t===toRaw(s)&&(i?hasChanged(r,o)&&trigger(t,"set",n,r):trigger(t,"add",n,r)),a}deleteProperty(t,n){const r=hasOwn(t,n);t[n];const s=Reflect.deleteProperty(t,n);return s&&r&&trigger(t,"delete",n,void 0),s}has(t,n){const r=Reflect.has(t,n);return(!isSymbol$1(n)||!builtInSymbols.has(n))&&track(t,"has",n),r}ownKeys(t){return track(t,"iterate",isArray$1(t)?"length":ITERATE_KEY),Reflect.ownKeys(t)}}class ReadonlyReactiveHandler extends BaseReactiveHandler{constructor(t=!1){super(!0,t)}set(t,n){return!0}deleteProperty(t,n){return!0}}const mutableHandlers=new MutableReactiveHandler,readonlyHandlers=new ReadonlyReactiveHandler,shallowReactiveHandlers=new MutableReactiveHandler(!0),shallowReadonlyHandlers=new ReadonlyReactiveHandler(!0),toShallow=e=>e,getProto=e=>Reflect.getPrototypeOf(e);function createIterableMethod(e,t,n){return function(...r){const s=this.__v_raw,o=toRaw(s),i=isMap(o),a=e==="entries"||e===Symbol.iterator&&i,c=e==="keys"&&i,d=s[e](...r),u=n?toShallow:t?toReadonly:toReactive;return!t&&track(o,"iterate",c?MAP_KEY_ITERATE_KEY:ITERATE_KEY),{next(){const{value:h,done:b}=d.next();return b?{value:h,done:b}:{value:a?[u(h[0]),u(h[1])]:u(h),done:b}},[Symbol.iterator](){return this}}}}function createReadonlyMethod(e){return function(...t){return e==="delete"?!1:e==="clear"?void 0:this}}function createInstrumentations(e,t){const n={get(s){const o=this.__v_raw,i=toRaw(o),a=toRaw(s);e||(hasChanged(s,a)&&track(i,"get",s),track(i,"get",a));const{has:c}=getProto(i),d=t?toShallow:e?toReadonly:toReactive;if(c.call(i,s))return d(o.get(s));if(c.call(i,a))return d(o.get(a));o!==i&&o.get(s)},get size(){const s=this.__v_raw;return!e&&track(toRaw(s),"iterate",ITERATE_KEY),Reflect.get(s,"size",s)},has(s){const o=this.__v_raw,i=toRaw(o),a=toRaw(s);return e||(hasChanged(s,a)&&track(i,"has",s),track(i,"has",a)),s===a?o.has(s):o.has(s)||o.has(a)},forEach(s,o){const i=this,a=i.__v_raw,c=toRaw(a),d=t?toShallow:e?toReadonly:toReactive;return!e&&track(c,"iterate",ITERATE_KEY),a.forEach((u,h)=>s.call(o,d(u),d(h),i))}};return extend(n,e?{add:createReadonlyMethod("add"),set:createReadonlyMethod("set"),delete:createReadonlyMethod("delete"),clear:createReadonlyMethod("clear")}:{add(s){!t&&!isShallow(s)&&!isReadonly(s)&&(s=toRaw(s));const o=toRaw(this);return getProto(o).has.call(o,s)||(o.add(s),trigger(o,"add",s,s)),this},set(s,o){!t&&!isShallow(o)&&!isReadonly(o)&&(o=toRaw(o));const i=toRaw(this),{has:a,get:c}=getProto(i);let d=a.call(i,s);d||(s=toRaw(s),d=a.call(i,s));const u=c.call(i,s);return i.set(s,o),d?hasChanged(o,u)&&trigger(i,"set",s,o):trigger(i,"add",s,o),this},delete(s){const o=toRaw(this),{has:i,get:a}=getProto(o);let c=i.call(o,s);c||(s=toRaw(s),c=i.call(o,s)),a&&a.call(o,s);const d=o.delete(s);return c&&trigger(o,"delete",s,void 0),d},clear(){const s=toRaw(this),o=s.size!==0,i=s.clear();return o&&trigger(s,"clear",void 0,void 0),i}}),["keys","values","entries",Symbol.iterator].forEach(s=>{n[s]=createIterableMethod(s,e,t)}),n}function createInstrumentationGetter(e,t){const n=createInstrumentations(e,t);return(r,s,o)=>s==="__v_isReactive"?!e:s==="__v_isReadonly"?e:s==="__v_raw"?r:Reflect.get(hasOwn(n,s)&&s in r?n:r,s,o)}const mutableCollectionHandlers={get:createInstrumentationGetter(!1,!1)},shallowCollectionHandlers={get:createInstrumentationGetter(!1,!0)},readonlyCollectionHandlers={get:createInstrumentationGetter(!0,!1)},shallowReadonlyCollectionHandlers={get:createInstrumentationGetter(!0,!0)},reactiveMap=new WeakMap,shallowReactiveMap=new WeakMap,readonlyMap=new WeakMap,shallowReadonlyMap=new WeakMap;function targetTypeMap(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function getTargetType(e){return e.__v_skip||!Object.isExtensible(e)?0:targetTypeMap(toRawType(e))}function reactive(e){return isReadonly(e)?e:createReactiveObject(e,!1,mutableHandlers,mutableCollectionHandlers,reactiveMap)}function shallowReactive(e){return createReactiveObject(e,!1,shallowReactiveHandlers,shallowCollectionHandlers,shallowReactiveMap)}function readonly(e){return createReactiveObject(e,!0,readonlyHandlers,readonlyCollectionHandlers,readonlyMap)}function shallowReadonly(e){return createReactiveObject(e,!0,shallowReadonlyHandlers,shallowReadonlyCollectionHandlers,shallowReadonlyMap)}function createReactiveObject(e,t,n,r,s){if(!isObject$1(e)||e.__v_raw&&!(t&&e.__v_isReactive))return e;const o=s.get(e);if(o)return o;const i=getTargetType(e);if(i===0)return e;const a=new Proxy(e,i===2?r:n);return s.set(e,a),a}function isReactive(e){return isReadonly(e)?isReactive(e.__v_raw):!!(e&&e.__v_isReactive)}function isReadonly(e){return!!(e&&e.__v_isReadonly)}function isShallow(e){return!!(e&&e.__v_isShallow)}function isProxy(e){return e?!!e.__v_raw:!1}function toRaw(e){const t=e&&e.__v_raw;return t?toRaw(t):e}function markRaw(e){return!hasOwn(e,"__v_skip")&&Object.isExtensible(e)&&def(e,"__v_skip",!0),e}const toReactive=e=>isObject$1(e)?reactive(e):e,toReadonly=e=>isObject$1(e)?readonly(e):e;function isRef(e){return e?e.__v_isRef===!0:!1}function ref(e){return createRef(e,!1)}function shallowRef(e){return createRef(e,!0)}function createRef(e,t){return isRef(e)?e:new RefImpl(e,t)}class RefImpl{constructor(t,n){this.dep=new Dep,this.__v_isRef=!0,this.__v_isShallow=!1,this._rawValue=n?t:toRaw(t),this._value=n?t:toReactive(t),this.__v_isShallow=n}get value(){return this.dep.track(),this._value}set value(t){const n=this._rawValue,r=this.__v_isShallow||isShallow(t)||isReadonly(t);t=r?t:toRaw(t),hasChanged(t,n)&&(this._rawValue=t,this._value=r?t:toReactive(t),this.dep.trigger())}}function unref(e){return isRef(e)?e.value:e}const shallowUnwrapHandlers={get:(e,t,n)=>t==="__v_raw"?e:unref(Reflect.get(e,t,n)),set:(e,t,n,r)=>{const s=e[t];return isRef(s)&&!isRef(n)?(s.value=n,!0):Reflect.set(e,t,n,r)}};function proxyRefs(e){return isReactive(e)?e:new Proxy(e,shallowUnwrapHandlers)}function toRefs(e){const t=isArray$1(e)?new Array(e.length):{};for(const n in e)t[n]=propertyToRef(e,n);return t}class ObjectRefImpl{constructor(t,n,r){this._object=t,this._key=n,this._defaultValue=r,this.__v_isRef=!0,this._value=void 0}get value(){const t=this._object[this._key];return this._value=t===void 0?this._defaultValue:t}set value(t){this._object[this._key]=t}get dep(){return getDepFromReactive(toRaw(this._object),this._key)}}class GetterRefImpl{constructor(t){this._getter=t,this.__v_isRef=!0,this.__v_isReadonly=!0,this._value=void 0}get value(){return this._value=this._getter()}}function toRef(e,t,n){return isRef(e)?e:isFunction$1(e)?new GetterRefImpl(e):isObject$1(e)&&arguments.length>1?propertyToRef(e,t,n):ref(e)}function propertyToRef(e,t,n){const r=e[t];return isRef(r)?r:new ObjectRefImpl(e,t,n)}class ComputedRefImpl{constructor(t,n,r){this.fn=t,this.setter=n,this._value=void 0,this.dep=new Dep(this),this.__v_isRef=!0,this.deps=void 0,this.depsTail=void 0,this.flags=16,this.globalVersion=globalVersion-1,this.next=void 0,this.effect=this,this.__v_isReadonly=!n,this.isSSR=r}notify(){if(this.flags|=16,!(this.flags&8)&&activeSub!==this)return batch(this,!0),!0}get value(){const t=this.dep.track();return refreshComputed(this),t&&(t.version=this.dep.version),this._value}set value(t){this.setter&&this.setter(t)}}function computed$1(e,t,n=!1){let r,s;return isFunction$1(e)?r=e:(r=e.get,s=e.set),new ComputedRefImpl(r,s,n)}const INITIAL_WATCHER_VALUE={},cleanupMap=new WeakMap;let activeWatcher;function onWatcherCleanup(e,t=!1,n=activeWatcher){if(n){let r=cleanupMap.get(n);r||cleanupMap.set(n,r=[]),r.push(e)}}function watch$1(e,t,n=EMPTY_OBJ){const{immediate:r,deep:s,once:o,scheduler:i,augmentJob:a,call:c}=n,d=N=>s?N:isShallow(N)||s===!1||s===0?traverse(N,1):traverse(N);let u,h,b,S,I=!1,E=!1;if(isRef(e)?(h=()=>e.value,I=isShallow(e)):isReactive(e)?(h=()=>d(e),I=!0):isArray$1(e)?(E=!0,I=e.some(N=>isReactive(N)||isShallow(N)),h=()=>e.map(N=>{if(isRef(N))return N.value;if(isReactive(N))return d(N);if(isFunction$1(N))return c?c(N,2):N()})):isFunction$1(e)?t?h=c?()=>c(e,2):e:h=()=>{if(b){pauseTracking();try{b()}finally{resetTracking()}}const N=activeWatcher;activeWatcher=u;try{return c?c(e,3,[S]):e(S)}finally{activeWatcher=N}}:h=NOOP,t&&s){const N=h,C=s===!0?1/0:s;h=()=>traverse(N(),C)}const A=getCurrentScope(),R=()=>{u.stop(),A&&A.active&&remove(A.effects,u)};if(o&&t){const N=t;t=(...C)=>{N(...C),R()}}let H=E?new Array(e.length).fill(INITIAL_WATCHER_VALUE):INITIAL_WATCHER_VALUE;const D=N=>{if(!(!(u.flags&1)||!u.dirty&&!N))if(t){const C=u.run();if(s||I||(E?C.some((L,G)=>hasChanged(L,H[G])):hasChanged(C,H))){b&&b();const L=activeWatcher;activeWatcher=u;try{const G=[C,H===INITIAL_WATCHER_VALUE?void 0:E&&H[0]===INITIAL_WATCHER_VALUE?[]:H,S];c?c(t,3,G):t(...G),H=C}finally{activeWatcher=L}}}else u.run()};return a&&a(D),u=new ReactiveEffect(h),u.scheduler=i?()=>i(D,!1):D,S=N=>onWatcherCleanup(N,!1,u),b=u.onStop=()=>{const N=cleanupMap.get(u);if(N){if(c)c(N,4);else for(const C of N)C();cleanupMap.delete(u)}},t?r?D(!0):H=u.run():i?i(D.bind(null,!0),!0):u.run(),R.pause=u.pause.bind(u),R.resume=u.resume.bind(u),R.stop=R,R}function traverse(e,t=1/0,n){if(t<=0||!isObject$1(e)||e.__v_skip||(n=n||new Set,n.has(e)))return e;if(n.add(e),t--,isRef(e))traverse(e.value,t,n);else if(isArray$1(e))for(let r=0;r<e.length;r++)traverse(e[r],t,n);else if(isSet(e)||isMap(e))e.forEach(r=>{traverse(r,t,n)});else if(isPlainObject$1(e)){for(const r in e)traverse(e[r],t,n);for(const r of Object.getOwnPropertySymbols(e))Object.prototype.propertyIsEnumerable.call(e,r)&&traverse(e[r],t,n)}return e}/**
* @vue/runtime-core v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const stack=[];let isWarning=!1;function warn$1(e,...t){if(isWarning)return;isWarning=!0,pauseTracking();const n=stack.length?stack[stack.length-1].component:null,r=n&&n.appContext.config.warnHandler,s=getComponentTrace();if(r)callWithErrorHandling(r,n,11,[e+t.map(o=>{var i,a;return(a=(i=o.toString)==null?void 0:i.call(o))!=null?a:JSON.stringify(o)}).join(""),n&&n.proxy,s.map(({vnode:o})=>`at <${formatComponentName(n,o.type)}>`).join(`
`),s]);else{const o=[`[Vue warn]: ${e}`,...t];s.length&&o.push(`
`,...formatTrace(s)),console.warn(...o)}resetTracking(),isWarning=!1}function getComponentTrace(){let e=stack[stack.length-1];if(!e)return[];const t=[];for(;e;){const n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});const r=e.component&&e.component.parent;e=r&&r.vnode}return t}function formatTrace(e){const t=[];return e.forEach((n,r)=>{t.push(...r===0?[]:[`
`],...formatTraceEntry(n))}),t}function formatTraceEntry({vnode:e,recurseCount:t}){const n=t>0?`... (${t} recursive calls)`:"",r=e.component?e.component.parent==null:!1,s=` at <${formatComponentName(e.component,e.type,r)}`,o=">"+n;return e.props?[s,...formatProps(e.props),o]:[s+o]}function formatProps(e){const t=[],n=Object.keys(e);return n.slice(0,3).forEach(r=>{t.push(...formatProp(r,e[r]))}),n.length>3&&t.push(" ..."),t}function formatProp(e,t,n){return isString(t)?(t=JSON.stringify(t),n?t:[`${e}=${t}`]):typeof t=="number"||typeof t=="boolean"||t==null?n?t:[`${e}=${t}`]:isRef(t)?(t=formatProp(e,toRaw(t.value),!0),n?t:[`${e}=Ref<`,t,">"]):isFunction$1(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=toRaw(t),n?t:[`${e}=`,t])}function callWithErrorHandling(e,t,n,r){try{return r?e(...r):e()}catch(s){handleError(s,t,n)}}function callWithAsyncErrorHandling(e,t,n,r){if(isFunction$1(e)){const s=callWithErrorHandling(e,t,n,r);return s&&isPromise(s)&&s.catch(o=>{handleError(o,t,n)}),s}if(isArray$1(e)){const s=[];for(let o=0;o<e.length;o++)s.push(callWithAsyncErrorHandling(e[o],t,n,r));return s}}function handleError(e,t,n,r=!0){const s=t?t.vnode:null,{errorHandler:o,throwUnhandledErrorInProduction:i}=t&&t.appContext.config||EMPTY_OBJ;if(t){let a=t.parent;const c=t.proxy,d=`https://vuejs.org/error-reference/#runtime-${n}`;for(;a;){const u=a.ec;if(u){for(let h=0;h<u.length;h++)if(u[h](e,c,d)===!1)return}a=a.parent}if(o){pauseTracking(),callWithErrorHandling(o,null,10,[e,c,d]),resetTracking();return}}logError(e,n,s,r,i)}function logError(e,t,n,r=!0,s=!1){if(s)throw e;console.error(e)}const queue=[];let flushIndex=-1;const pendingPostFlushCbs=[];let activePostFlushCbs=null,postFlushIndex=0;const resolvedPromise=Promise.resolve();let currentFlushPromise=null;function nextTick(e){const t=currentFlushPromise||resolvedPromise;return e?t.then(this?e.bind(this):e):t}function findInsertionIndex(e){let t=flushIndex+1,n=queue.length;for(;t<n;){const r=t+n>>>1,s=queue[r],o=getId(s);o<e||o===e&&s.flags&2?t=r+1:n=r}return t}function queueJob(e){if(!(e.flags&1)){const t=getId(e),n=queue[queue.length-1];!n||!(e.flags&2)&&t>=getId(n)?queue.push(e):queue.splice(findInsertionIndex(t),0,e),e.flags|=1,queueFlush()}}function queueFlush(){currentFlushPromise||(currentFlushPromise=resolvedPromise.then(flushJobs))}function queuePostFlushCb(e){isArray$1(e)?pendingPostFlushCbs.push(...e):activePostFlushCbs&&e.id===-1?activePostFlushCbs.splice(postFlushIndex+1,0,e):e.flags&1||(pendingPostFlushCbs.push(e),e.flags|=1),queueFlush()}function flushPreFlushCbs(e,t,n=flushIndex+1){for(;n<queue.length;n++){const r=queue[n];if(r&&r.flags&2){if(e&&r.id!==e.uid)continue;queue.splice(n,1),n--,r.flags&4&&(r.flags&=-2),r(),r.flags&4||(r.flags&=-2)}}}function flushPostFlushCbs(e){if(pendingPostFlushCbs.length){const t=[...new Set(pendingPostFlushCbs)].sort((n,r)=>getId(n)-getId(r));if(pendingPostFlushCbs.length=0,activePostFlushCbs){activePostFlushCbs.push(...t);return}for(activePostFlushCbs=t,postFlushIndex=0;postFlushIndex<activePostFlushCbs.length;postFlushIndex++){const n=activePostFlushCbs[postFlushIndex];n.flags&4&&(n.flags&=-2),n.flags&8||n(),n.flags&=-2}activePostFlushCbs=null,postFlushIndex=0}}const getId=e=>e.id==null?e.flags&2?-1:1/0:e.id;function flushJobs(e){try{for(flushIndex=0;flushIndex<queue.length;flushIndex++){const t=queue[flushIndex];t&&!(t.flags&8)&&(t.flags&4&&(t.flags&=-2),callWithErrorHandling(t,t.i,t.i?15:14),t.flags&4||(t.flags&=-2))}}finally{for(;flushIndex<queue.length;flushIndex++){const t=queue[flushIndex];t&&(t.flags&=-2)}flushIndex=-1,queue.length=0,flushPostFlushCbs(),currentFlushPromise=null,(queue.length||pendingPostFlushCbs.length)&&flushJobs()}}let currentRenderingInstance=null,currentScopeId=null;function setCurrentRenderingInstance(e){const t=currentRenderingInstance;return currentRenderingInstance=e,currentScopeId=e&&e.type.__scopeId||null,t}function withCtx(e,t=currentRenderingInstance,n){if(!t||e._n)return e;const r=(...s)=>{r._d&&setBlockTracking(-1);const o=setCurrentRenderingInstance(t);let i;try{i=e(...s)}finally{setCurrentRenderingInstance(o),r._d&&setBlockTracking(1)}return i};return r._n=!0,r._c=!0,r._d=!0,r}function invokeDirectiveHook(e,t,n,r){const s=e.dirs,o=t&&t.dirs;for(let i=0;i<s.length;i++){const a=s[i];o&&(a.oldValue=o[i].value);let c=a.dir[r];c&&(pauseTracking(),callWithAsyncErrorHandling(c,n,8,[e.el,a,e,t]),resetTracking())}}const TeleportEndKey=Symbol("_vte"),isTeleport=e=>e.__isTeleport;function setTransitionHooks(e,t){e.shapeFlag&6&&e.component?(e.transition=t,setTransitionHooks(e.component.subTree,t)):e.shapeFlag&128?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}/*! #__NO_SIDE_EFFECTS__ */function defineComponent(e,t){return isFunction$1(e)?extend({name:e.name},t,{setup:e}):e}function markAsyncBoundary(e){e.ids=[e.ids[0]+e.ids[2]+++"-",0,0]}function setRef(e,t,n,r,s=!1){if(isArray$1(e)){e.forEach((I,E)=>setRef(I,t&&(isArray$1(t)?t[E]:t),n,r,s));return}if(isAsyncWrapper(r)&&!s){r.shapeFlag&512&&r.type.__asyncResolved&&r.component.subTree.component&&setRef(e,t,n,r.component.subTree);return}const o=r.shapeFlag&4?getComponentPublicInstance(r.component):r.el,i=s?null:o,{i:a,r:c}=e,d=t&&t.r,u=a.refs===EMPTY_OBJ?a.refs={}:a.refs,h=a.setupState,b=toRaw(h),S=h===EMPTY_OBJ?()=>!1:I=>hasOwn(b,I);if(d!=null&&d!==c&&(isString(d)?(u[d]=null,S(d)&&(h[d]=null)):isRef(d)&&(d.value=null)),isFunction$1(c))callWithErrorHandling(c,a,12,[i,u]);else{const I=isString(c),E=isRef(c);if(I||E){const A=()=>{if(e.f){const R=I?S(c)?h[c]:u[c]:c.value;s?isArray$1(R)&&remove(R,o):isArray$1(R)?R.includes(o)||R.push(o):I?(u[c]=[o],S(c)&&(h[c]=u[c])):(c.value=[o],e.k&&(u[e.k]=c.value))}else I?(u[c]=i,S(c)&&(h[c]=i)):E&&(c.value=i,e.k&&(u[e.k]=i))};i?(A.id=-1,queuePostRenderEffect(A,n)):A()}}}getGlobalThis().requestIdleCallback;getGlobalThis().cancelIdleCallback;const isAsyncWrapper=e=>!!e.type.__asyncLoader,isKeepAlive=e=>e.type.__isKeepAlive;function onActivated(e,t){registerKeepAliveHook(e,"a",t)}function onDeactivated(e,t){registerKeepAliveHook(e,"da",t)}function registerKeepAliveHook(e,t,n=currentInstance){const r=e.__wdc||(e.__wdc=()=>{let s=n;for(;s;){if(s.isDeactivated)return;s=s.parent}return e()});if(injectHook(t,r,n),n){let s=n.parent;for(;s&&s.parent;)isKeepAlive(s.parent.vnode)&&injectToKeepAliveRoot(r,t,n,s),s=s.parent}}function injectToKeepAliveRoot(e,t,n,r){const s=injectHook(t,e,r,!0);onUnmounted(()=>{remove(r[t],s)},n)}function injectHook(e,t,n=currentInstance,r=!1){if(n){const s=n[e]||(n[e]=[]),o=t.__weh||(t.__weh=(...i)=>{pauseTracking();const a=setCurrentInstance(n),c=callWithAsyncErrorHandling(t,n,e,i);return a(),resetTracking(),c});return r?s.unshift(o):s.push(o),o}}const createHook=e=>(t,n=currentInstance)=>{(!isInSSRComponentSetup||e==="sp")&&injectHook(e,(...r)=>t(...r),n)},onBeforeMount=createHook("bm"),onMounted=createHook("m"),onBeforeUpdate=createHook("bu"),onUpdated=createHook("u"),onBeforeUnmount=createHook("bum"),onUnmounted=createHook("um"),onServerPrefetch=createHook("sp"),onRenderTriggered=createHook("rtg"),onRenderTracked=createHook("rtc");function onErrorCaptured(e,t=currentInstance){injectHook("ec",e,t)}const COMPONENTS="components",NULL_DYNAMIC_COMPONENT=Symbol.for("v-ndc");function resolveDynamicComponent(e){return isString(e)?resolveAsset(COMPONENTS,e,!1)||e:e||NULL_DYNAMIC_COMPONENT}function resolveAsset(e,t,n=!0,r=!1){const s=currentRenderingInstance||currentInstance;if(s){const o=s.type;{const a=getComponentName(o,!1);if(a&&(a===t||a===camelize(t)||a===capitalize(camelize(t))))return o}const i=resolve(s[e]||o[e],t)||resolve(s.appContext[e],t);return!i&&r?o:i}}function resolve(e,t){return e&&(e[t]||e[camelize(t)]||e[capitalize(camelize(t))])}function renderSlot(e,t,n={},r,s){if(currentRenderingInstance.ce||currentRenderingInstance.parent&&isAsyncWrapper(currentRenderingInstance.parent)&&currentRenderingInstance.parent.ce)return t!=="default"&&(n.name=t),openBlock(),createBlock(Fragment,null,[createVNode("slot",n,r&&r())],64);let o=e[t];o&&o._c&&(o._d=!1),openBlock();const i=o&&ensureValidVNode(o(n)),a=n.key||i&&i.key,c=createBlock(Fragment,{key:(a&&!isSymbol$1(a)?a:`_${t}`)+(!i&&r?"_fb":"")},i||(r?r():[]),i&&e._===1?64:-2);return c.scopeId&&(c.slotScopeIds=[c.scopeId+"-s"]),o&&o._c&&(o._d=!0),c}function ensureValidVNode(e){return e.some(t=>isVNode(t)?!(t.type===Comment||t.type===Fragment&&!ensureValidVNode(t.children)):!0)?e:null}const getPublicInstance=e=>e?isStatefulComponent(e)?getComponentPublicInstance(e):getPublicInstance(e.parent):null,publicPropertiesMap=extend(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>getPublicInstance(e.parent),$root:e=>getPublicInstance(e.root),$host:e=>e.ce,$emit:e=>e.emit,$options:e=>resolveMergedOptions(e),$forceUpdate:e=>e.f||(e.f=()=>{queueJob(e.update)}),$nextTick:e=>e.n||(e.n=nextTick.bind(e.proxy)),$watch:e=>instanceWatch.bind(e)}),hasSetupBinding=(e,t)=>e!==EMPTY_OBJ&&!e.__isScriptSetup&&hasOwn(e,t),PublicInstanceProxyHandlers={get({_:e},t){if(t==="__v_skip")return!0;const{ctx:n,setupState:r,data:s,props:o,accessCache:i,type:a,appContext:c}=e;let d;if(t[0]!=="$"){const S=i[t];if(S!==void 0)switch(S){case 1:return r[t];case 2:return s[t];case 4:return n[t];case 3:return o[t]}else{if(hasSetupBinding(r,t))return i[t]=1,r[t];if(s!==EMPTY_OBJ&&hasOwn(s,t))return i[t]=2,s[t];if((d=e.propsOptions[0])&&hasOwn(d,t))return i[t]=3,o[t];if(n!==EMPTY_OBJ&&hasOwn(n,t))return i[t]=4,n[t];shouldCacheAccess&&(i[t]=0)}}const u=publicPropertiesMap[t];let h,b;if(u)return t==="$attrs"&&track(e.attrs,"get",""),u(e);if((h=a.__cssModules)&&(h=h[t]))return h;if(n!==EMPTY_OBJ&&hasOwn(n,t))return i[t]=4,n[t];if(b=c.config.globalProperties,hasOwn(b,t))return b[t]},set({_:e},t,n){const{data:r,setupState:s,ctx:o}=e;return hasSetupBinding(s,t)?(s[t]=n,!0):r!==EMPTY_OBJ&&hasOwn(r,t)?(r[t]=n,!0):hasOwn(e.props,t)||t[0]==="$"&&t.slice(1)in e?!1:(o[t]=n,!0)},has({_:{data:e,setupState:t,accessCache:n,ctx:r,appContext:s,propsOptions:o}},i){let a;return!!n[i]||e!==EMPTY_OBJ&&hasOwn(e,i)||hasSetupBinding(t,i)||(a=o[0])&&hasOwn(a,i)||hasOwn(r,i)||hasOwn(publicPropertiesMap,i)||hasOwn(s.config.globalProperties,i)},defineProperty(e,t,n){return n.get!=null?e._.accessCache[t]=0:hasOwn(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)}};function useSlots(){return getContext().slots}function getContext(){const e=getCurrentInstance();return e.setupContext||(e.setupContext=createSetupContext(e))}function normalizePropsOrEmits(e){return isArray$1(e)?e.reduce((t,n)=>(t[n]=null,t),{}):e}let shouldCacheAccess=!0;function applyOptions(e){const t=resolveMergedOptions(e),n=e.proxy,r=e.ctx;shouldCacheAccess=!1,t.beforeCreate&&callHook(t.beforeCreate,e,"bc");const{data:s,computed:o,methods:i,watch:a,provide:c,inject:d,created:u,beforeMount:h,mounted:b,beforeUpdate:S,updated:I,activated:E,deactivated:A,beforeDestroy:R,beforeUnmount:H,destroyed:D,unmounted:N,render:C,renderTracked:L,renderTriggered:G,errorCaptured:k,serverPrefetch:B,expose:W,inheritAttrs:X,components:Z,directives:re,filters:ie}=t;if(d&&resolveInjections(d,r,null),i)for(const V in i){const K=i[V];isFunction$1(K)&&(r[V]=K.bind(n))}if(s){const V=s.call(n,n);isObject$1(V)&&(e.data=reactive(V))}if(shouldCacheAccess=!0,o)for(const V in o){const K=o[V],se=isFunction$1(K)?K.bind(n,n):isFunction$1(K.get)?K.get.bind(n,n):NOOP,fe=!isFunction$1(K)&&isFunction$1(K.set)?K.set.bind(n):NOOP,oe=computed({get:se,set:fe});Object.defineProperty(r,V,{enumerable:!0,configurable:!0,get:()=>oe.value,set:Q=>oe.value=Q})}if(a)for(const V in a)createWatcher(a[V],r,n,V);if(c){const V=isFunction$1(c)?c.call(n):c;Reflect.ownKeys(V).forEach(K=>{provide(K,V[K])})}u&&callHook(u,e,"c");function U(V,K){isArray$1(K)?K.forEach(se=>V(se.bind(n))):K&&V(K.bind(n))}if(U(onBeforeMount,h),U(onMounted,b),U(onBeforeUpdate,S),U(onUpdated,I),U(onActivated,E),U(onDeactivated,A),U(onErrorCaptured,k),U(onRenderTracked,L),U(onRenderTriggered,G),U(onBeforeUnmount,H),U(onUnmounted,N),U(onServerPrefetch,B),isArray$1(W))if(W.length){const V=e.exposed||(e.exposed={});W.forEach(K=>{Object.defineProperty(V,K,{get:()=>n[K],set:se=>n[K]=se})})}else e.exposed||(e.exposed={});C&&e.render===NOOP&&(e.render=C),X!=null&&(e.inheritAttrs=X),Z&&(e.components=Z),re&&(e.directives=re),B&&markAsyncBoundary(e)}function resolveInjections(e,t,n=NOOP){isArray$1(e)&&(e=normalizeInject(e));for(const r in e){const s=e[r];let o;isObject$1(s)?"default"in s?o=inject(s.from||r,s.default,!0):o=inject(s.from||r):o=inject(s),isRef(o)?Object.defineProperty(t,r,{enumerable:!0,configurable:!0,get:()=>o.value,set:i=>o.value=i}):t[r]=o}}function callHook(e,t,n){callWithAsyncErrorHandling(isArray$1(e)?e.map(r=>r.bind(t.proxy)):e.bind(t.proxy),t,n)}function createWatcher(e,t,n,r){let s=r.includes(".")?createPathGetter(n,r):()=>n[r];if(isString(e)){const o=t[e];isFunction$1(o)&&watch(s,o)}else if(isFunction$1(e))watch(s,e.bind(n));else if(isObject$1(e))if(isArray$1(e))e.forEach(o=>createWatcher(o,t,n,r));else{const o=isFunction$1(e.handler)?e.handler.bind(n):t[e.handler];isFunction$1(o)&&watch(s,o,e)}}function resolveMergedOptions(e){const t=e.type,{mixins:n,extends:r}=t,{mixins:s,optionsCache:o,config:{optionMergeStrategies:i}}=e.appContext,a=o.get(t);let c;return a?c=a:!s.length&&!n&&!r?c=t:(c={},s.length&&s.forEach(d=>mergeOptions(c,d,i,!0)),mergeOptions(c,t,i)),isObject$1(t)&&o.set(t,c),c}function mergeOptions(e,t,n,r=!1){const{mixins:s,extends:o}=t;o&&mergeOptions(e,o,n,!0),s&&s.forEach(i=>mergeOptions(e,i,n,!0));for(const i in t)if(!(r&&i==="expose")){const a=internalOptionMergeStrats[i]||n&&n[i];e[i]=a?a(e[i],t[i]):t[i]}return e}const internalOptionMergeStrats={data:mergeDataFn,props:mergeEmitsOrPropsOptions,emits:mergeEmitsOrPropsOptions,methods:mergeObjectOptions,computed:mergeObjectOptions,beforeCreate:mergeAsArray,created:mergeAsArray,beforeMount:mergeAsArray,mounted:mergeAsArray,beforeUpdate:mergeAsArray,updated:mergeAsArray,beforeDestroy:mergeAsArray,beforeUnmount:mergeAsArray,destroyed:mergeAsArray,unmounted:mergeAsArray,activated:mergeAsArray,deactivated:mergeAsArray,errorCaptured:mergeAsArray,serverPrefetch:mergeAsArray,components:mergeObjectOptions,directives:mergeObjectOptions,watch:mergeWatchOptions,provide:mergeDataFn,inject:mergeInject};function mergeDataFn(e,t){return t?e?function(){return extend(isFunction$1(e)?e.call(this,this):e,isFunction$1(t)?t.call(this,this):t)}:t:e}function mergeInject(e,t){return mergeObjectOptions(normalizeInject(e),normalizeInject(t))}function normalizeInject(e){if(isArray$1(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function mergeAsArray(e,t){return e?[...new Set([].concat(e,t))]:t}function mergeObjectOptions(e,t){return e?extend(Object.create(null),e,t):t}function mergeEmitsOrPropsOptions(e,t){return e?isArray$1(e)&&isArray$1(t)?[...new Set([...e,...t])]:extend(Object.create(null),normalizePropsOrEmits(e),normalizePropsOrEmits(t??{})):t}function mergeWatchOptions(e,t){if(!e)return t;if(!t)return e;const n=extend(Object.create(null),e);for(const r in t)n[r]=mergeAsArray(e[r],t[r]);return n}function createAppContext(){return{app:null,config:{isNativeTag:NO,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let uid$1=0;function createAppAPI(e,t){return function(r,s=null){isFunction$1(r)||(r=extend({},r)),s!=null&&!isObject$1(s)&&(s=null);const o=createAppContext(),i=new WeakSet,a=[];let c=!1;const d=o.app={_uid:uid$1++,_component:r,_props:s,_container:null,_context:o,_instance:null,version:version$1,get config(){return o.config},set config(u){},use(u,...h){return i.has(u)||(u&&isFunction$1(u.install)?(i.add(u),u.install(d,...h)):isFunction$1(u)&&(i.add(u),u(d,...h))),d},mixin(u){return o.mixins.includes(u)||o.mixins.push(u),d},component(u,h){return h?(o.components[u]=h,d):o.components[u]},directive(u,h){return h?(o.directives[u]=h,d):o.directives[u]},mount(u,h,b){if(!c){const S=d._ceVNode||createVNode(r,s);return S.appContext=o,b===!0?b="svg":b===!1&&(b=void 0),e(S,u,b),c=!0,d._container=u,u.__vue_app__=d,getComponentPublicInstance(S.component)}},onUnmount(u){a.push(u)},unmount(){c&&(callWithAsyncErrorHandling(a,d._instance,16),e(null,d._container),delete d._container.__vue_app__)},provide(u,h){return o.provides[u]=h,d},runWithContext(u){const h=currentApp;currentApp=d;try{return u()}finally{currentApp=h}}};return d}}let currentApp=null;function provide(e,t){if(currentInstance){let n=currentInstance.provides;const r=currentInstance.parent&&currentInstance.parent.provides;r===n&&(n=currentInstance.provides=Object.create(r)),n[e]=t}}function inject(e,t,n=!1){const r=currentInstance||currentRenderingInstance;if(r||currentApp){const s=currentApp?currentApp._context.provides:r?r.parent==null?r.vnode.appContext&&r.vnode.appContext.provides:r.parent.provides:void 0;if(s&&e in s)return s[e];if(arguments.length>1)return n&&isFunction$1(t)?t.call(r&&r.proxy):t}}function hasInjectionContext(){return!!(currentInstance||currentRenderingInstance||currentApp)}const internalObjectProto={},createInternalObject=()=>Object.create(internalObjectProto),isInternalObject=e=>Object.getPrototypeOf(e)===internalObjectProto;function initProps(e,t,n,r=!1){const s={},o=createInternalObject();e.propsDefaults=Object.create(null),setFullProps(e,t,s,o);for(const i in e.propsOptions[0])i in s||(s[i]=void 0);n?e.props=r?s:shallowReactive(s):e.type.props?e.props=s:e.props=o,e.attrs=o}function updateProps(e,t,n,r){const{props:s,attrs:o,vnode:{patchFlag:i}}=e,a=toRaw(s),[c]=e.propsOptions;let d=!1;if((r||i>0)&&!(i&16)){if(i&8){const u=e.vnode.dynamicProps;for(let h=0;h<u.length;h++){let b=u[h];if(isEmitListener(e.emitsOptions,b))continue;const S=t[b];if(c)if(hasOwn(o,b))S!==o[b]&&(o[b]=S,d=!0);else{const I=camelize(b);s[I]=resolvePropValue(c,a,I,S,e,!1)}else S!==o[b]&&(o[b]=S,d=!0)}}}else{setFullProps(e,t,s,o)&&(d=!0);let u;for(const h in a)(!t||!hasOwn(t,h)&&((u=hyphenate(h))===h||!hasOwn(t,u)))&&(c?n&&(n[h]!==void 0||n[u]!==void 0)&&(s[h]=resolvePropValue(c,a,h,void 0,e,!0)):delete s[h]);if(o!==a)for(const h in o)(!t||!hasOwn(t,h))&&(delete o[h],d=!0)}d&&trigger(e.attrs,"set","")}function setFullProps(e,t,n,r){const[s,o]=e.propsOptions;let i=!1,a;if(t)for(let c in t){if(isReservedProp(c))continue;const d=t[c];let u;s&&hasOwn(s,u=camelize(c))?!o||!o.includes(u)?n[u]=d:(a||(a={}))[u]=d:isEmitListener(e.emitsOptions,c)||(!(c in r)||d!==r[c])&&(r[c]=d,i=!0)}if(o){const c=toRaw(n),d=a||EMPTY_OBJ;for(let u=0;u<o.length;u++){const h=o[u];n[h]=resolvePropValue(s,c,h,d[h],e,!hasOwn(d,h))}}return i}function resolvePropValue(e,t,n,r,s,o){const i=e[n];if(i!=null){const a=hasOwn(i,"default");if(a&&r===void 0){const c=i.default;if(i.type!==Function&&!i.skipFactory&&isFunction$1(c)){const{propsDefaults:d}=s;if(n in d)r=d[n];else{const u=setCurrentInstance(s);r=d[n]=c.call(null,t),u()}}else r=c;s.ce&&s.ce._setProp(n,r)}i[0]&&(o&&!a?r=!1:i[1]&&(r===""||r===hyphenate(n))&&(r=!0))}return r}const mixinPropsCache=new WeakMap;function normalizePropsOptions(e,t,n=!1){const r=n?mixinPropsCache:t.propsCache,s=r.get(e);if(s)return s;const o=e.props,i={},a=[];let c=!1;if(!isFunction$1(e)){const u=h=>{c=!0;const[b,S]=normalizePropsOptions(h,t,!0);extend(i,b),S&&a.push(...S)};!n&&t.mixins.length&&t.mixins.forEach(u),e.extends&&u(e.extends),e.mixins&&e.mixins.forEach(u)}if(!o&&!c)return isObject$1(e)&&r.set(e,EMPTY_ARR),EMPTY_ARR;if(isArray$1(o))for(let u=0;u<o.length;u++){const h=camelize(o[u]);validatePropName(h)&&(i[h]=EMPTY_OBJ)}else if(o)for(const u in o){const h=camelize(u);if(validatePropName(h)){const b=o[u],S=i[h]=isArray$1(b)||isFunction$1(b)?{type:b}:extend({},b),I=S.type;let E=!1,A=!0;if(isArray$1(I))for(let R=0;R<I.length;++R){const H=I[R],D=isFunction$1(H)&&H.name;if(D==="Boolean"){E=!0;break}else D==="String"&&(A=!1)}else E=isFunction$1(I)&&I.name==="Boolean";S[0]=E,S[1]=A,(E||hasOwn(S,"default"))&&a.push(h)}}const d=[i,a];return isObject$1(e)&&r.set(e,d),d}function validatePropName(e){return e[0]!=="$"&&!isReservedProp(e)}const isInternalKey=e=>e[0]==="_"||e==="$stable",normalizeSlotValue=e=>isArray$1(e)?e.map(normalizeVNode):[normalizeVNode(e)],normalizeSlot=(e,t,n)=>{if(t._n)return t;const r=withCtx((...s)=>normalizeSlotValue(t(...s)),n);return r._c=!1,r},normalizeObjectSlots=(e,t,n)=>{const r=e._ctx;for(const s in e){if(isInternalKey(s))continue;const o=e[s];if(isFunction$1(o))t[s]=normalizeSlot(s,o,r);else if(o!=null){const i=normalizeSlotValue(o);t[s]=()=>i}}},normalizeVNodeSlots=(e,t)=>{const n=normalizeSlotValue(t);e.slots.default=()=>n},assignSlots=(e,t,n)=>{for(const r in t)(n||r!=="_")&&(e[r]=t[r])},initSlots=(e,t,n)=>{const r=e.slots=createInternalObject();if(e.vnode.shapeFlag&32){const s=t._;s?(assignSlots(r,t,n),n&&def(r,"_",s,!0)):normalizeObjectSlots(t,r)}else t&&normalizeVNodeSlots(e,t)},updateSlots=(e,t,n)=>{const{vnode:r,slots:s}=e;let o=!0,i=EMPTY_OBJ;if(r.shapeFlag&32){const a=t._;a?n&&a===1?o=!1:assignSlots(s,t,n):(o=!t.$stable,normalizeObjectSlots(t,s)),i=t}else t&&(normalizeVNodeSlots(e,t),i={default:1});if(o)for(const a in s)!isInternalKey(a)&&i[a]==null&&delete s[a]},queuePostRenderEffect=queueEffectWithSuspense;function createRenderer(e){return baseCreateRenderer(e)}function baseCreateRenderer(e,t){const n=getGlobalThis();n.__VUE__=!0;const{insert:r,remove:s,patchProp:o,createElement:i,createText:a,createComment:c,setText:d,setElementText:u,parentNode:h,nextSibling:b,setScopeId:S=NOOP,insertStaticContent:I}=e,E=(l,f,g,v=null,m=null,y=null,x=void 0,w=null,T=!!f.dynamicChildren)=>{if(l===f)return;l&&!isSameVNodeType(l,f)&&(v=de(l),Q(l,m,y,!0),l=null),f.patchFlag===-2&&(T=!1,f.dynamicChildren=null);const{type:_,ref:$,shapeFlag:P}=f;switch(_){case Text:A(l,f,g,v);break;case Comment:R(l,f,g,v);break;case Static:l==null&&H(f,g,v,x);break;case Fragment:Z(l,f,g,v,m,y,x,w,T);break;default:P&1?C(l,f,g,v,m,y,x,w,T):P&6?re(l,f,g,v,m,y,x,w,T):(P&64||P&128)&&_.process(l,f,g,v,m,y,x,w,T,ce)}$!=null&&m&&setRef($,l&&l.ref,y,f||l,!f)},A=(l,f,g,v)=>{if(l==null)r(f.el=a(f.children),g,v);else{const m=f.el=l.el;f.children!==l.children&&d(m,f.children)}},R=(l,f,g,v)=>{l==null?r(f.el=c(f.children||""),g,v):f.el=l.el},H=(l,f,g,v)=>{[l.el,l.anchor]=I(l.children,f,g,v,l.el,l.anchor)},D=({el:l,anchor:f},g,v)=>{let m;for(;l&&l!==f;)m=b(l),r(l,g,v),l=m;r(f,g,v)},N=({el:l,anchor:f})=>{let g;for(;l&&l!==f;)g=b(l),s(l),l=g;s(f)},C=(l,f,g,v,m,y,x,w,T)=>{f.type==="svg"?x="svg":f.type==="math"&&(x="mathml"),l==null?L(f,g,v,m,y,x,w,T):B(l,f,m,y,x,w,T)},L=(l,f,g,v,m,y,x,w)=>{let T,_;const{props:$,shapeFlag:P,transition:O,dirs:M}=l;if(T=l.el=i(l.type,y,$&&$.is,$),P&8?u(T,l.children):P&16&&k(l.children,T,null,v,m,resolveChildrenNamespace(l,y),x,w),M&&invokeDirectiveHook(l,null,v,"created"),G(T,l,l.scopeId,x,v),$){for(const z in $)z!=="value"&&!isReservedProp(z)&&o(T,z,null,$[z],y,v);"value"in $&&o(T,"value",null,$.value,y),(_=$.onVnodeBeforeMount)&&invokeVNodeHook(_,v,l)}M&&invokeDirectiveHook(l,null,v,"beforeMount");const F=needTransition(m,O);F&&O.beforeEnter(T),r(T,f,g),((_=$&&$.onVnodeMounted)||F||M)&&queuePostRenderEffect(()=>{_&&invokeVNodeHook(_,v,l),F&&O.enter(T),M&&invokeDirectiveHook(l,null,v,"mounted")},m)},G=(l,f,g,v,m)=>{if(g&&S(l,g),v)for(let y=0;y<v.length;y++)S(l,v[y]);if(m){let y=m.subTree;if(f===y||isSuspense(y.type)&&(y.ssContent===f||y.ssFallback===f)){const x=m.vnode;G(l,x,x.scopeId,x.slotScopeIds,m.parent)}}},k=(l,f,g,v,m,y,x,w,T=0)=>{for(let _=T;_<l.length;_++){const $=l[_]=w?cloneIfMounted(l[_]):normalizeVNode(l[_]);E(null,$,f,g,v,m,y,x,w)}},B=(l,f,g,v,m,y,x)=>{const w=f.el=l.el;let{patchFlag:T,dynamicChildren:_,dirs:$}=f;T|=l.patchFlag&16;const P=l.props||EMPTY_OBJ,O=f.props||EMPTY_OBJ;let M;if(g&&toggleRecurse(g,!1),(M=O.onVnodeBeforeUpdate)&&invokeVNodeHook(M,g,f,l),$&&invokeDirectiveHook(f,l,g,"beforeUpdate"),g&&toggleRecurse(g,!0),(P.innerHTML&&O.innerHTML==null||P.textContent&&O.textContent==null)&&u(w,""),_?W(l.dynamicChildren,_,w,g,v,resolveChildrenNamespace(f,m),y):x||K(l,f,w,null,g,v,resolveChildrenNamespace(f,m),y,!1),T>0){if(T&16)X(w,P,O,g,m);else if(T&2&&P.class!==O.class&&o(w,"class",null,O.class,m),T&4&&o(w,"style",P.style,O.style,m),T&8){const F=f.dynamicProps;for(let z=0;z<F.length;z++){const j=F[z],q=P[j],Y=O[j];(Y!==q||j==="value")&&o(w,j,q,Y,m,g)}}T&1&&l.children!==f.children&&u(w,f.children)}else!x&&_==null&&X(w,P,O,g,m);((M=O.onVnodeUpdated)||$)&&queuePostRenderEffect(()=>{M&&invokeVNodeHook(M,g,f,l),$&&invokeDirectiveHook(f,l,g,"updated")},v)},W=(l,f,g,v,m,y,x)=>{for(let w=0;w<f.length;w++){const T=l[w],_=f[w],$=T.el&&(T.type===Fragment||!isSameVNodeType(T,_)||T.shapeFlag&70)?h(T.el):g;E(T,_,$,null,v,m,y,x,!0)}},X=(l,f,g,v,m)=>{if(f!==g){if(f!==EMPTY_OBJ)for(const y in f)!isReservedProp(y)&&!(y in g)&&o(l,y,f[y],null,m,v);for(const y in g){if(isReservedProp(y))continue;const x=g[y],w=f[y];x!==w&&y!=="value"&&o(l,y,w,x,m,v)}"value"in g&&o(l,"value",f.value,g.value,m)}},Z=(l,f,g,v,m,y,x,w,T)=>{const _=f.el=l?l.el:a(""),$=f.anchor=l?l.anchor:a("");let{patchFlag:P,dynamicChildren:O,slotScopeIds:M}=f;M&&(w=w?w.concat(M):M),l==null?(r(_,g,v),r($,g,v),k(f.children||[],g,$,m,y,x,w,T)):P>0&&P&64&&O&&l.dynamicChildren?(W(l.dynamicChildren,O,g,m,y,x,w),(f.key!=null||m&&f===m.subTree)&&traverseStaticChildren(l,f,!0)):K(l,f,g,$,m,y,x,w,T)},re=(l,f,g,v,m,y,x,w,T)=>{f.slotScopeIds=w,l==null?f.shapeFlag&512?m.ctx.activate(f,g,v,x,T):ie(f,g,v,m,y,x,T):ue(l,f,T)},ie=(l,f,g,v,m,y,x)=>{const w=l.component=createComponentInstance(l,v,m);if(isKeepAlive(l)&&(w.ctx.renderer=ce),setupComponent(w,!1,x),w.asyncDep){if(m&&m.registerDep(w,U,x),!l.el){const T=w.subTree=createVNode(Comment);R(null,T,f,g)}}else U(w,l,f,g,m,y,x)},ue=(l,f,g)=>{const v=f.component=l.component;if(shouldUpdateComponent(l,f,g))if(v.asyncDep&&!v.asyncResolved){V(v,f,g);return}else v.next=f,v.update();else f.el=l.el,v.vnode=f},U=(l,f,g,v,m,y,x)=>{const w=()=>{if(l.isMounted){let{next:P,bu:O,u:M,parent:F,vnode:z}=l;{const te=locateNonHydratedAsyncRoot(l);if(te){P&&(P.el=z.el,V(l,P,x)),te.asyncDep.then(()=>{l.isUnmounted||w()});return}}let j=P,q;toggleRecurse(l,!1),P?(P.el=z.el,V(l,P,x)):P=z,O&&invokeArrayFns(O),(q=P.props&&P.props.onVnodeBeforeUpdate)&&invokeVNodeHook(q,F,P,z),toggleRecurse(l,!0);const Y=renderComponentRoot(l),ee=l.subTree;l.subTree=Y,E(ee,Y,h(ee.el),de(ee),l,m,y),P.el=Y.el,j===null&&updateHOCHostEl(l,Y.el),M&&queuePostRenderEffect(M,m),(q=P.props&&P.props.onVnodeUpdated)&&queuePostRenderEffect(()=>invokeVNodeHook(q,F,P,z),m)}else{let P;const{el:O,props:M}=f,{bm:F,m:z,parent:j,root:q,type:Y}=l,ee=isAsyncWrapper(f);toggleRecurse(l,!1),F&&invokeArrayFns(F),!ee&&(P=M&&M.onVnodeBeforeMount)&&invokeVNodeHook(P,j,f),toggleRecurse(l,!0);{q.ce&&q.ce._injectChildStyle(Y);const te=l.subTree=renderComponentRoot(l);E(null,te,g,v,l,m,y),f.el=te.el}if(z&&queuePostRenderEffect(z,m),!ee&&(P=M&&M.onVnodeMounted)){const te=f;queuePostRenderEffect(()=>invokeVNodeHook(P,j,te),m)}(f.shapeFlag&256||j&&isAsyncWrapper(j.vnode)&&j.vnode.shapeFlag&256)&&l.a&&queuePostRenderEffect(l.a,m),l.isMounted=!0,f=g=v=null}};l.scope.on();const T=l.effect=new ReactiveEffect(w);l.scope.off();const _=l.update=T.run.bind(T),$=l.job=T.runIfDirty.bind(T);$.i=l,$.id=l.uid,T.scheduler=()=>queueJob($),toggleRecurse(l,!0),_()},V=(l,f,g)=>{f.component=l;const v=l.vnode.props;l.vnode=f,l.next=null,updateProps(l,f.props,v,g),updateSlots(l,f.children,g),pauseTracking(),flushPreFlushCbs(l),resetTracking()},K=(l,f,g,v,m,y,x,w,T=!1)=>{const _=l&&l.children,$=l?l.shapeFlag:0,P=f.children,{patchFlag:O,shapeFlag:M}=f;if(O>0){if(O&128){fe(_,P,g,v,m,y,x,w,T);return}else if(O&256){se(_,P,g,v,m,y,x,w,T);return}}M&8?($&16&&ae(_,m,y),P!==_&&u(g,P)):$&16?M&16?fe(_,P,g,v,m,y,x,w,T):ae(_,m,y,!0):($&8&&u(g,""),M&16&&k(P,g,v,m,y,x,w,T))},se=(l,f,g,v,m,y,x,w,T)=>{l=l||EMPTY_ARR,f=f||EMPTY_ARR;const _=l.length,$=f.length,P=Math.min(_,$);let O;for(O=0;O<P;O++){const M=f[O]=T?cloneIfMounted(f[O]):normalizeVNode(f[O]);E(l[O],M,g,null,m,y,x,w,T)}_>$?ae(l,m,y,!0,!1,P):k(f,g,v,m,y,x,w,T,P)},fe=(l,f,g,v,m,y,x,w,T)=>{let _=0;const $=f.length;let P=l.length-1,O=$-1;for(;_<=P&&_<=O;){const M=l[_],F=f[_]=T?cloneIfMounted(f[_]):normalizeVNode(f[_]);if(isSameVNodeType(M,F))E(M,F,g,null,m,y,x,w,T);else break;_++}for(;_<=P&&_<=O;){const M=l[P],F=f[O]=T?cloneIfMounted(f[O]):normalizeVNode(f[O]);if(isSameVNodeType(M,F))E(M,F,g,null,m,y,x,w,T);else break;P--,O--}if(_>P){if(_<=O){const M=O+1,F=M<$?f[M].el:v;for(;_<=O;)E(null,f[_]=T?cloneIfMounted(f[_]):normalizeVNode(f[_]),g,F,m,y,x,w,T),_++}}else if(_>O)for(;_<=P;)Q(l[_],m,y,!0),_++;else{const M=_,F=_,z=new Map;for(_=F;_<=O;_++){const J=f[_]=T?cloneIfMounted(f[_]):normalizeVNode(f[_]);J.key!=null&&z.set(J.key,_)}let j,q=0;const Y=O-F+1;let ee=!1,te=0;const le=new Array(Y);for(_=0;_<Y;_++)le[_]=0;for(_=M;_<=P;_++){const J=l[_];if(q>=Y){Q(J,m,y,!0);continue}let ne;if(J.key!=null)ne=z.get(J.key);else for(j=F;j<=O;j++)if(le[j-F]===0&&isSameVNodeType(J,f[j])){ne=j;break}ne===void 0?Q(J,m,y,!0):(le[ne-F]=_+1,ne>=te?te=ne:ee=!0,E(J,f[ne],g,null,m,y,x,w,T),q++)}const me=ee?getSequence(le):EMPTY_ARR;for(j=me.length-1,_=Y-1;_>=0;_--){const J=F+_,ne=f[J],be=J+1<$?f[J+1].el:v;le[_]===0?E(null,ne,g,be,m,y,x,w,T):ee&&(j<0||_!==me[j]?oe(ne,g,be,2):j--)}}},oe=(l,f,g,v,m=null)=>{const{el:y,type:x,transition:w,children:T,shapeFlag:_}=l;if(_&6){oe(l.component.subTree,f,g,v);return}if(_&128){l.suspense.move(f,g,v);return}if(_&64){x.move(l,f,g,ce);return}if(x===Fragment){r(y,f,g);for(let P=0;P<T.length;P++)oe(T[P],f,g,v);r(l.anchor,f,g);return}if(x===Static){D(l,f,g);return}if(v!==2&&_&1&&w)if(v===0)w.beforeEnter(y),r(y,f,g),queuePostRenderEffect(()=>w.enter(y),m);else{const{leave:P,delayLeave:O,afterLeave:M}=w,F=()=>r(y,f,g),z=()=>{P(y,()=>{F(),M&&M()})};O?O(y,F,z):z()}else r(y,f,g)},Q=(l,f,g,v=!1,m=!1)=>{const{type:y,props:x,ref:w,children:T,dynamicChildren:_,shapeFlag:$,patchFlag:P,dirs:O,cacheIndex:M}=l;if(P===-2&&(m=!1),w!=null&&setRef(w,null,g,l,!0),M!=null&&(f.renderCache[M]=void 0),$&256){f.ctx.deactivate(l);return}const F=$&1&&O,z=!isAsyncWrapper(l);let j;if(z&&(j=x&&x.onVnodeBeforeUnmount)&&invokeVNodeHook(j,f,l),$&6)_e(l.component,g,v);else{if($&128){l.suspense.unmount(g,v);return}F&&invokeDirectiveHook(l,null,f,"beforeUnmount"),$&64?l.type.remove(l,f,g,ce,v):_&&!_.hasOnce&&(y!==Fragment||P>0&&P&64)?ae(_,f,g,!1,!0):(y===Fragment&&P&384||!m&&$&16)&&ae(T,f,g),v&&he(l)}(z&&(j=x&&x.onVnodeUnmounted)||F)&&queuePostRenderEffect(()=>{j&&invokeVNodeHook(j,f,l),F&&invokeDirectiveHook(l,null,f,"unmounted")},g)},he=l=>{const{type:f,el:g,anchor:v,transition:m}=l;if(f===Fragment){ve(g,v);return}if(f===Static){N(l);return}const y=()=>{s(g),m&&!m.persisted&&m.afterLeave&&m.afterLeave()};if(l.shapeFlag&1&&m&&!m.persisted){const{leave:x,delayLeave:w}=m,T=()=>x(g,y);w?w(l.el,y,T):T()}else y()},ve=(l,f)=>{let g;for(;l!==f;)g=b(l),s(l),l=g;s(f)},_e=(l,f,g)=>{const{bum:v,scope:m,job:y,subTree:x,um:w,m:T,a:_}=l;invalidateMount(T),invalidateMount(_),v&&invokeArrayFns(v),m.stop(),y&&(y.flags|=8,Q(x,l,f,g)),w&&queuePostRenderEffect(w,f),queuePostRenderEffect(()=>{l.isUnmounted=!0},f),f&&f.pendingBranch&&!f.isUnmounted&&l.asyncDep&&!l.asyncResolved&&l.suspenseId===f.pendingId&&(f.deps--,f.deps===0&&f.resolve())},ae=(l,f,g,v=!1,m=!1,y=0)=>{for(let x=y;x<l.length;x++)Q(l[x],f,g,v,m)},de=l=>{if(l.shapeFlag&6)return de(l.component.subTree);if(l.shapeFlag&128)return l.suspense.next();const f=b(l.anchor||l.el),g=f&&f[TeleportEndKey];return g?b(g):f};let pe=!1;const ge=(l,f,g)=>{l==null?f._vnode&&Q(f._vnode,null,null,!0):E(f._vnode||null,l,f,null,null,null,g),f._vnode=l,pe||(pe=!0,flushPreFlushCbs(),flushPostFlushCbs(),pe=!1)},ce={p:E,um:Q,m:oe,r:he,mt:ie,mc:k,pc:K,pbc:W,n:de,o:e};return{render:ge,hydrate:void 0,createApp:createAppAPI(ge)}}function resolveChildrenNamespace({type:e,props:t},n){return n==="svg"&&e==="foreignObject"||n==="mathml"&&e==="annotation-xml"&&t&&t.encoding&&t.encoding.includes("html")?void 0:n}function toggleRecurse({effect:e,job:t},n){n?(e.flags|=32,t.flags|=4):(e.flags&=-33,t.flags&=-5)}function needTransition(e,t){return(!e||e&&!e.pendingBranch)&&t&&!t.persisted}function traverseStaticChildren(e,t,n=!1){const r=e.children,s=t.children;if(isArray$1(r)&&isArray$1(s))for(let o=0;o<r.length;o++){const i=r[o];let a=s[o];a.shapeFlag&1&&!a.dynamicChildren&&((a.patchFlag<=0||a.patchFlag===32)&&(a=s[o]=cloneIfMounted(s[o]),a.el=i.el),!n&&a.patchFlag!==-2&&traverseStaticChildren(i,a)),a.type===Text&&(a.el=i.el)}}function getSequence(e){const t=e.slice(),n=[0];let r,s,o,i,a;const c=e.length;for(r=0;r<c;r++){const d=e[r];if(d!==0){if(s=n[n.length-1],e[s]<d){t[r]=s,n.push(r);continue}for(o=0,i=n.length-1;o<i;)a=o+i>>1,e[n[a]]<d?o=a+1:i=a;d<e[n[o]]&&(o>0&&(t[r]=n[o-1]),n[o]=r)}}for(o=n.length,i=n[o-1];o-- >0;)n[o]=i,i=t[i];return n}function locateNonHydratedAsyncRoot(e){const t=e.subTree.component;if(t)return t.asyncDep&&!t.asyncResolved?t:locateNonHydratedAsyncRoot(t)}function invalidateMount(e){if(e)for(let t=0;t<e.length;t++)e[t].flags|=8}const ssrContextKey=Symbol.for("v-scx"),useSSRContext=()=>inject(ssrContextKey);function watchEffect(e,t){return doWatch(e,null,t)}function watch(e,t,n){return doWatch(e,t,n)}function doWatch(e,t,n=EMPTY_OBJ){const{immediate:r,deep:s,flush:o,once:i}=n,a=extend({},n),c=t&&r||!t&&o!=="post";let d;if(isInSSRComponentSetup){if(o==="sync"){const S=useSSRContext();d=S.__watcherHandles||(S.__watcherHandles=[])}else if(!c){const S=()=>{};return S.stop=NOOP,S.resume=NOOP,S.pause=NOOP,S}}const u=currentInstance;a.call=(S,I,E)=>callWithAsyncErrorHandling(S,u,I,E);let h=!1;o==="post"?a.scheduler=S=>{queuePostRenderEffect(S,u&&u.suspense)}:o!=="sync"&&(h=!0,a.scheduler=(S,I)=>{I?S():queueJob(S)}),a.augmentJob=S=>{t&&(S.flags|=4),h&&(S.flags|=2,u&&(S.id=u.uid,S.i=u))};const b=watch$1(e,t,a);return isInSSRComponentSetup&&(d?d.push(b):c&&b()),b}function instanceWatch(e,t,n){const r=this.proxy,s=isString(e)?e.includes(".")?createPathGetter(r,e):()=>r[e]:e.bind(r,r);let o;isFunction$1(t)?o=t:(o=t.handler,n=t);const i=setCurrentInstance(this),a=doWatch(s,o.bind(r),n);return i(),a}function createPathGetter(e,t){const n=t.split(".");return()=>{let r=e;for(let s=0;s<n.length&&r;s++)r=r[n[s]];return r}}const getModelModifiers=(e,t)=>t==="modelValue"||t==="model-value"?e.modelModifiers:e[`${t}Modifiers`]||e[`${camelize(t)}Modifiers`]||e[`${hyphenate(t)}Modifiers`];function emit(e,t,...n){if(e.isUnmounted)return;const r=e.vnode.props||EMPTY_OBJ;let s=n;const o=t.startsWith("update:"),i=o&&getModelModifiers(r,t.slice(7));i&&(i.trim&&(s=n.map(u=>isString(u)?u.trim():u)),i.number&&(s=n.map(looseToNumber)));let a,c=r[a=toHandlerKey(t)]||r[a=toHandlerKey(camelize(t))];!c&&o&&(c=r[a=toHandlerKey(hyphenate(t))]),c&&callWithAsyncErrorHandling(c,e,6,s);const d=r[a+"Once"];if(d){if(!e.emitted)e.emitted={};else if(e.emitted[a])return;e.emitted[a]=!0,callWithAsyncErrorHandling(d,e,6,s)}}function normalizeEmitsOptions(e,t,n=!1){const r=t.emitsCache,s=r.get(e);if(s!==void 0)return s;const o=e.emits;let i={},a=!1;if(!isFunction$1(e)){const c=d=>{const u=normalizeEmitsOptions(d,t,!0);u&&(a=!0,extend(i,u))};!n&&t.mixins.length&&t.mixins.forEach(c),e.extends&&c(e.extends),e.mixins&&e.mixins.forEach(c)}return!o&&!a?(isObject$1(e)&&r.set(e,null),null):(isArray$1(o)?o.forEach(c=>i[c]=null):extend(i,o),isObject$1(e)&&r.set(e,i),i)}function isEmitListener(e,t){return!e||!isOn(t)?!1:(t=t.slice(2).replace(/Once$/,""),hasOwn(e,t[0].toLowerCase()+t.slice(1))||hasOwn(e,hyphenate(t))||hasOwn(e,t))}function markAttrsAccessed(){}function renderComponentRoot(e){const{type:t,vnode:n,proxy:r,withProxy:s,propsOptions:[o],slots:i,attrs:a,emit:c,render:d,renderCache:u,props:h,data:b,setupState:S,ctx:I,inheritAttrs:E}=e,A=setCurrentRenderingInstance(e);let R,H;try{if(n.shapeFlag&4){const N=s||r,C=N;R=normalizeVNode(d.call(C,N,u,h,S,b,I)),H=a}else{const N=t;R=normalizeVNode(N.length>1?N(h,{attrs:a,slots:i,emit:c}):N(h,null)),H=t.props?a:getFunctionalFallthrough(a)}}catch(N){blockStack.length=0,handleError(N,e,1),R=createVNode(Comment)}let D=R;if(H&&E!==!1){const N=Object.keys(H),{shapeFlag:C}=D;N.length&&C&7&&(o&&N.some(isModelListener)&&(H=filterModelListeners(H,o)),D=cloneVNode(D,H,!1,!0))}return n.dirs&&(D=cloneVNode(D,null,!1,!0),D.dirs=D.dirs?D.dirs.concat(n.dirs):n.dirs),n.transition&&setTransitionHooks(D,n.transition),R=D,setCurrentRenderingInstance(A),R}const getFunctionalFallthrough=e=>{let t;for(const n in e)(n==="class"||n==="style"||isOn(n))&&((t||(t={}))[n]=e[n]);return t},filterModelListeners=(e,t)=>{const n={};for(const r in e)(!isModelListener(r)||!(r.slice(9)in t))&&(n[r]=e[r]);return n};function shouldUpdateComponent(e,t,n){const{props:r,children:s,component:o}=e,{props:i,children:a,patchFlag:c}=t,d=o.emitsOptions;if(t.dirs||t.transition)return!0;if(n&&c>=0){if(c&1024)return!0;if(c&16)return r?hasPropsChanged(r,i,d):!!i;if(c&8){const u=t.dynamicProps;for(let h=0;h<u.length;h++){const b=u[h];if(i[b]!==r[b]&&!isEmitListener(d,b))return!0}}}else return(s||a)&&(!a||!a.$stable)?!0:r===i?!1:r?i?hasPropsChanged(r,i,d):!0:!!i;return!1}function hasPropsChanged(e,t,n){const r=Object.keys(t);if(r.length!==Object.keys(e).length)return!0;for(let s=0;s<r.length;s++){const o=r[s];if(t[o]!==e[o]&&!isEmitListener(n,o))return!0}return!1}function updateHOCHostEl({vnode:e,parent:t},n){for(;t;){const r=t.subTree;if(r.suspense&&r.suspense.activeBranch===e&&(r.el=e.el),r===e)(e=t.vnode).el=n,t=t.parent;else break}}const isSuspense=e=>e.__isSuspense;function queueEffectWithSuspense(e,t){t&&t.pendingBranch?isArray$1(e)?t.effects.push(...e):t.effects.push(e):queuePostFlushCb(e)}const Fragment=Symbol.for("v-fgt"),Text=Symbol.for("v-txt"),Comment=Symbol.for("v-cmt"),Static=Symbol.for("v-stc"),blockStack=[];let currentBlock=null;function openBlock(e=!1){blockStack.push(currentBlock=e?null:[])}function closeBlock(){blockStack.pop(),currentBlock=blockStack[blockStack.length-1]||null}let isBlockTreeEnabled=1;function setBlockTracking(e,t=!1){isBlockTreeEnabled+=e,e<0&&currentBlock&&t&&(currentBlock.hasOnce=!0)}function setupBlock(e){return e.dynamicChildren=isBlockTreeEnabled>0?currentBlock||EMPTY_ARR:null,closeBlock(),isBlockTreeEnabled>0&&currentBlock&&currentBlock.push(e),e}function createElementBlock(e,t,n,r,s,o){return setupBlock(createBaseVNode(e,t,n,r,s,o,!0))}function createBlock(e,t,n,r,s){return setupBlock(createVNode(e,t,n,r,s,!0))}function isVNode(e){return e?e.__v_isVNode===!0:!1}function isSameVNodeType(e,t){return e.type===t.type&&e.key===t.key}const normalizeKey=({key:e})=>e??null,normalizeRef=({ref:e,ref_key:t,ref_for:n})=>(typeof e=="number"&&(e=""+e),e!=null?isString(e)||isRef(e)||isFunction$1(e)?{i:currentRenderingInstance,r:e,k:t,f:!!n}:e:null);function createBaseVNode(e,t=null,n=null,r=0,s=null,o=e===Fragment?0:1,i=!1,a=!1){const c={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&normalizeKey(t),ref:t&&normalizeRef(t),scopeId:currentScopeId,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetStart:null,targetAnchor:null,staticCount:0,shapeFlag:o,patchFlag:r,dynamicProps:s,dynamicChildren:null,appContext:null,ctx:currentRenderingInstance};return a?(normalizeChildren(c,n),o&128&&e.normalize(c)):n&&(c.shapeFlag|=isString(n)?8:16),isBlockTreeEnabled>0&&!i&&currentBlock&&(c.patchFlag>0||o&6)&&c.patchFlag!==32&&currentBlock.push(c),c}const createVNode=_createVNode;function _createVNode(e,t=null,n=null,r=0,s=null,o=!1){if((!e||e===NULL_DYNAMIC_COMPONENT)&&(e=Comment),isVNode(e)){const a=cloneVNode(e,t,!0);return n&&normalizeChildren(a,n),isBlockTreeEnabled>0&&!o&&currentBlock&&(a.shapeFlag&6?currentBlock[currentBlock.indexOf(e)]=a:currentBlock.push(a)),a.patchFlag=-2,a}if(isClassComponent(e)&&(e=e.__vccOpts),t){t=guardReactiveProps(t);let{class:a,style:c}=t;a&&!isString(a)&&(t.class=normalizeClass(a)),isObject$1(c)&&(isProxy(c)&&!isArray$1(c)&&(c=extend({},c)),t.style=normalizeStyle(c))}const i=isString(e)?1:isSuspense(e)?128:isTeleport(e)?64:isObject$1(e)?4:isFunction$1(e)?2:0;return createBaseVNode(e,t,n,r,s,i,o,!0)}function guardReactiveProps(e){return e?isProxy(e)||isInternalObject(e)?extend({},e):e:null}function cloneVNode(e,t,n=!1,r=!1){const{props:s,ref:o,patchFlag:i,children:a,transition:c}=e,d=t?mergeProps(s||{},t):s,u={__v_isVNode:!0,__v_skip:!0,type:e.type,props:d,key:d&&normalizeKey(d),ref:t&&t.ref?n&&o?isArray$1(o)?o.concat(normalizeRef(t)):[o,normalizeRef(t)]:normalizeRef(t):o,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:a,target:e.target,targetStart:e.targetStart,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==Fragment?i===-1?16:i|16:i,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:c,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&cloneVNode(e.ssContent),ssFallback:e.ssFallback&&cloneVNode(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce};return c&&r&&setTransitionHooks(u,c.clone(u)),u}function createTextVNode(e=" ",t=0){return createVNode(Text,null,e,t)}function createCommentVNode(e="",t=!1){return t?(openBlock(),createBlock(Comment,null,e)):createVNode(Comment,null,e)}function normalizeVNode(e){return e==null||typeof e=="boolean"?createVNode(Comment):isArray$1(e)?createVNode(Fragment,null,e.slice()):isVNode(e)?cloneIfMounted(e):createVNode(Text,null,String(e))}function cloneIfMounted(e){return e.el===null&&e.patchFlag!==-1||e.memo?e:cloneVNode(e)}function normalizeChildren(e,t){let n=0;const{shapeFlag:r}=e;if(t==null)t=null;else if(isArray$1(t))n=16;else if(typeof t=="object")if(r&65){const s=t.default;s&&(s._c&&(s._d=!1),normalizeChildren(e,s()),s._c&&(s._d=!0));return}else{n=32;const s=t._;!s&&!isInternalObject(t)?t._ctx=currentRenderingInstance:s===3&&currentRenderingInstance&&(currentRenderingInstance.slots._===1?t._=1:(t._=2,e.patchFlag|=1024))}else isFunction$1(t)?(t={default:t,_ctx:currentRenderingInstance},n=32):(t=String(t),r&64?(n=16,t=[createTextVNode(t)]):n=8);e.children=t,e.shapeFlag|=n}function mergeProps(...e){const t={};for(let n=0;n<e.length;n++){const r=e[n];for(const s in r)if(s==="class")t.class!==r.class&&(t.class=normalizeClass([t.class,r.class]));else if(s==="style")t.style=normalizeStyle([t.style,r.style]);else if(isOn(s)){const o=t[s],i=r[s];i&&o!==i&&!(isArray$1(o)&&o.includes(i))&&(t[s]=o?[].concat(o,i):i)}else s!==""&&(t[s]=r[s])}return t}function invokeVNodeHook(e,t,n,r=null){callWithAsyncErrorHandling(e,t,7,[n,r])}const emptyAppContext=createAppContext();let uid=0;function createComponentInstance(e,t,n){const r=e.type,s=(t?t.appContext:e.appContext)||emptyAppContext,o={uid:uid++,vnode:e,type:r,parent:t,appContext:s,root:null,next:null,subTree:null,effect:null,update:null,job:null,scope:new EffectScope(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(s.provides),ids:t?t.ids:["",0,0],accessCache:null,renderCache:[],components:null,directives:null,propsOptions:normalizePropsOptions(r,s),emitsOptions:normalizeEmitsOptions(r,s),emit:null,emitted:null,propsDefaults:EMPTY_OBJ,inheritAttrs:r.inheritAttrs,ctx:EMPTY_OBJ,data:EMPTY_OBJ,props:EMPTY_OBJ,attrs:EMPTY_OBJ,slots:EMPTY_OBJ,refs:EMPTY_OBJ,setupState:EMPTY_OBJ,setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return o.ctx={_:o},o.root=t?t.root:o,o.emit=emit.bind(null,o),e.ce&&e.ce(o),o}let currentInstance=null;const getCurrentInstance=()=>currentInstance||currentRenderingInstance;let internalSetCurrentInstance,setInSSRSetupState;{const e=getGlobalThis(),t=(n,r)=>{let s;return(s=e[n])||(s=e[n]=[]),s.push(r),o=>{s.length>1?s.forEach(i=>i(o)):s[0](o)}};internalSetCurrentInstance=t("__VUE_INSTANCE_SETTERS__",n=>currentInstance=n),setInSSRSetupState=t("__VUE_SSR_SETTERS__",n=>isInSSRComponentSetup=n)}const setCurrentInstance=e=>{const t=currentInstance;return internalSetCurrentInstance(e),e.scope.on(),()=>{e.scope.off(),internalSetCurrentInstance(t)}},unsetCurrentInstance=()=>{currentInstance&&currentInstance.scope.off(),internalSetCurrentInstance(null)};function isStatefulComponent(e){return e.vnode.shapeFlag&4}let isInSSRComponentSetup=!1;function setupComponent(e,t=!1,n=!1){t&&setInSSRSetupState(t);const{props:r,children:s}=e.vnode,o=isStatefulComponent(e);initProps(e,r,o,t),initSlots(e,s,n);const i=o?setupStatefulComponent(e,t):void 0;return t&&setInSSRSetupState(!1),i}function setupStatefulComponent(e,t){const n=e.type;e.accessCache=Object.create(null),e.proxy=new Proxy(e.ctx,PublicInstanceProxyHandlers);const{setup:r}=n;if(r){pauseTracking();const s=e.setupContext=r.length>1?createSetupContext(e):null,o=setCurrentInstance(e),i=callWithErrorHandling(r,e,0,[e.props,s]),a=isPromise(i);if(resetTracking(),o(),(a||e.sp)&&!isAsyncWrapper(e)&&markAsyncBoundary(e),a){if(i.then(unsetCurrentInstance,unsetCurrentInstance),t)return i.then(c=>{handleSetupResult(e,c)}).catch(c=>{handleError(c,e,0)});e.asyncDep=i}else handleSetupResult(e,i)}else finishComponentSetup(e)}function handleSetupResult(e,t,n){isFunction$1(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:isObject$1(t)&&(e.setupState=proxyRefs(t)),finishComponentSetup(e)}function finishComponentSetup(e,t,n){const r=e.type;e.render||(e.render=r.render||NOOP);{const s=setCurrentInstance(e);pauseTracking();try{applyOptions(e)}finally{resetTracking(),s()}}}const attrsProxyHandlers={get(e,t){return track(e,"get",""),e[t]}};function createSetupContext(e){const t=n=>{e.exposed=n||{}};return{attrs:new Proxy(e.attrs,attrsProxyHandlers),slots:e.slots,emit:e.emit,expose:t}}function getComponentPublicInstance(e){return e.exposed?e.exposeProxy||(e.exposeProxy=new Proxy(proxyRefs(markRaw(e.exposed)),{get(t,n){if(n in t)return t[n];if(n in publicPropertiesMap)return publicPropertiesMap[n](e)},has(t,n){return n in t||n in publicPropertiesMap}})):e.proxy}const classifyRE=/(?:^|[-_])(\w)/g,classify=e=>e.replace(classifyRE,t=>t.toUpperCase()).replace(/[-_]/g,"");function getComponentName(e,t=!0){return isFunction$1(e)?e.displayName||e.name:e.name||t&&e.__name}function formatComponentName(e,t,n=!1){let r=getComponentName(t);if(!r&&t.__file){const s=t.__file.match(/([^/\\]+)\.\w+$/);s&&(r=s[1])}if(!r&&e&&e.parent){const s=o=>{for(const i in o)if(o[i]===t)return i};r=s(e.components||e.parent.type.components)||s(e.appContext.components)}return r?classify(r):n?"App":"Anonymous"}function isClassComponent(e){return isFunction$1(e)&&"__vccOpts"in e}const computed=(e,t)=>computed$1(e,t,isInSSRComponentSetup),version$1="3.5.13",warn=NOOP;/**
* @vue/runtime-dom v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let policy;const tt=typeof window<"u"&&window.trustedTypes;if(tt)try{policy=tt.createPolicy("vue",{createHTML:e=>e})}catch{}const unsafeToTrustedHTML=policy?e=>policy.createHTML(e):e=>e,svgNS="http://www.w3.org/2000/svg",mathmlNS="http://www.w3.org/1998/Math/MathML",doc=typeof document<"u"?document:null,templateContainer=doc&&doc.createElement("template"),nodeOps={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,r)=>{const s=t==="svg"?doc.createElementNS(svgNS,e):t==="mathml"?doc.createElementNS(mathmlNS,e):n?doc.createElement(e,{is:n}):doc.createElement(e);return e==="select"&&r&&r.multiple!=null&&s.setAttribute("multiple",r.multiple),s},createText:e=>doc.createTextNode(e),createComment:e=>doc.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>doc.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},insertStaticContent(e,t,n,r,s,o){const i=n?n.previousSibling:t.lastChild;if(s&&(s===o||s.nextSibling))for(;t.insertBefore(s.cloneNode(!0),n),!(s===o||!(s=s.nextSibling)););else{templateContainer.innerHTML=unsafeToTrustedHTML(r==="svg"?`<svg>${e}</svg>`:r==="mathml"?`<math>${e}</math>`:e);const a=templateContainer.content;if(r==="svg"||r==="mathml"){const c=a.firstChild;for(;c.firstChild;)a.appendChild(c.firstChild);a.removeChild(c)}t.insertBefore(a,n)}return[i?i.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}},vtcKey=Symbol("_vtc");function patchClass(e,t,n){const r=e[vtcKey];r&&(t=(t?[t,...r]:[...r]).join(" ")),t==null?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}const vShowOriginalDisplay=Symbol("_vod"),vShowHidden=Symbol("_vsh"),CSS_VAR_TEXT=Symbol(""),displayRE=/(^|;)\s*display\s*:/;function patchStyle(e,t,n){const r=e.style,s=isString(n);let o=!1;if(n&&!s){if(t)if(isString(t))for(const i of t.split(";")){const a=i.slice(0,i.indexOf(":")).trim();n[a]==null&&setStyle(r,a,"")}else for(const i in t)n[i]==null&&setStyle(r,i,"");for(const i in n)i==="display"&&(o=!0),setStyle(r,i,n[i])}else if(s){if(t!==n){const i=r[CSS_VAR_TEXT];i&&(n+=";"+i),r.cssText=n,o=displayRE.test(n)}}else t&&e.removeAttribute("style");vShowOriginalDisplay in e&&(e[vShowOriginalDisplay]=o?r.display:"",e[vShowHidden]&&(r.display="none"))}const importantRE=/\s*!important$/;function setStyle(e,t,n){if(isArray$1(n))n.forEach(r=>setStyle(e,t,r));else if(n==null&&(n=""),t.startsWith("--"))e.setProperty(t,n);else{const r=autoPrefix(e,t);importantRE.test(n)?e.setProperty(hyphenate(r),n.replace(importantRE,""),"important"):e[r]=n}}const prefixes=["Webkit","Moz","ms"],prefixCache={};function autoPrefix(e,t){const n=prefixCache[t];if(n)return n;let r=camelize(t);if(r!=="filter"&&r in e)return prefixCache[t]=r;r=capitalize(r);for(let s=0;s<prefixes.length;s++){const o=prefixes[s]+r;if(o in e)return prefixCache[t]=o}return t}const xlinkNS="http://www.w3.org/1999/xlink";function patchAttr(e,t,n,r,s,o=isSpecialBooleanAttr(t)){r&&t.startsWith("xlink:")?n==null?e.removeAttributeNS(xlinkNS,t.slice(6,t.length)):e.setAttributeNS(xlinkNS,t,n):n==null||o&&!includeBooleanAttr(n)?e.removeAttribute(t):e.setAttribute(t,o?"":isSymbol$1(n)?String(n):n)}function patchDOMProp(e,t,n,r,s){if(t==="innerHTML"||t==="textContent"){n!=null&&(e[t]=t==="innerHTML"?unsafeToTrustedHTML(n):n);return}const o=e.tagName;if(t==="value"&&o!=="PROGRESS"&&!o.includes("-")){const a=o==="OPTION"?e.getAttribute("value")||"":e.value,c=n==null?e.type==="checkbox"?"on":"":String(n);(a!==c||!("_value"in e))&&(e.value=c),n==null&&e.removeAttribute(t),e._value=n;return}let i=!1;if(n===""||n==null){const a=typeof e[t];a==="boolean"?n=includeBooleanAttr(n):n==null&&a==="string"?(n="",i=!0):a==="number"&&(n=0,i=!0)}try{e[t]=n}catch{}i&&e.removeAttribute(s||t)}function addEventListener(e,t,n,r){e.addEventListener(t,n,r)}function removeEventListener(e,t,n,r){e.removeEventListener(t,n,r)}const veiKey=Symbol("_vei");function patchEvent(e,t,n,r,s=null){const o=e[veiKey]||(e[veiKey]={}),i=o[t];if(r&&i)i.value=r;else{const[a,c]=parseName(t);if(r){const d=o[t]=createInvoker(r,s);addEventListener(e,a,d,c)}else i&&(removeEventListener(e,a,i,c),o[t]=void 0)}}const optionsModifierRE=/(?:Once|Passive|Capture)$/;function parseName(e){let t;if(optionsModifierRE.test(e)){t={};let r;for(;r=e.match(optionsModifierRE);)e=e.slice(0,e.length-r[0].length),t[r[0].toLowerCase()]=!0}return[e[2]===":"?e.slice(3):hyphenate(e.slice(2)),t]}let cachedNow=0;const p=Promise.resolve(),getNow=()=>cachedNow||(p.then(()=>cachedNow=0),cachedNow=Date.now());function createInvoker(e,t){const n=r=>{if(!r._vts)r._vts=Date.now();else if(r._vts<=n.attached)return;callWithAsyncErrorHandling(patchStopImmediatePropagation(r,n.value),t,5,[r])};return n.value=e,n.attached=getNow(),n}function patchStopImmediatePropagation(e,t){if(isArray$1(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map(r=>s=>!s._stopped&&r&&r(s))}else return t}const isNativeOn=e=>e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&e.charCodeAt(2)>96&&e.charCodeAt(2)<123,patchProp=(e,t,n,r,s,o)=>{const i=s==="svg";t==="class"?patchClass(e,r,i):t==="style"?patchStyle(e,n,r):isOn(t)?isModelListener(t)||patchEvent(e,t,n,r,o):(t[0]==="."?(t=t.slice(1),!0):t[0]==="^"?(t=t.slice(1),!1):shouldSetAsProp(e,t,r,i))?(patchDOMProp(e,t,r),!e.tagName.includes("-")&&(t==="value"||t==="checked"||t==="selected")&&patchAttr(e,t,r,i,o,t!=="value")):e._isVueCE&&(/[A-Z]/.test(t)||!isString(r))?patchDOMProp(e,camelize(t),r,o,t):(t==="true-value"?e._trueValue=r:t==="false-value"&&(e._falseValue=r),patchAttr(e,t,r,i))};function shouldSetAsProp(e,t,n,r){if(r)return!!(t==="innerHTML"||t==="textContent"||t in e&&isNativeOn(t)&&isFunction$1(n));if(t==="spellcheck"||t==="draggable"||t==="translate"||t==="form"||t==="list"&&e.tagName==="INPUT"||t==="type"&&e.tagName==="TEXTAREA")return!1;if(t==="width"||t==="height"){const s=e.tagName;if(s==="IMG"||s==="VIDEO"||s==="CANVAS"||s==="SOURCE")return!1}return isNativeOn(t)&&isString(n)?!1:t in e}const systemModifiers=["ctrl","shift","alt","meta"],modifierGuards={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&e.button!==0,middle:e=>"button"in e&&e.button!==1,right:e=>"button"in e&&e.button!==2,exact:(e,t)=>systemModifiers.some(n=>e[`${n}Key`]&&!t.includes(n))},withModifiers=(e,t)=>{const n=e._withMods||(e._withMods={}),r=t.join(".");return n[r]||(n[r]=(s,...o)=>{for(let i=0;i<t.length;i++){const a=modifierGuards[t[i]];if(a&&a(s,t))return}return e(s,...o)})},keyNames={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},withKeys=(e,t)=>{const n=e._withKeys||(e._withKeys={}),r=t.join(".");return n[r]||(n[r]=s=>{if(!("key"in s))return;const o=hyphenate(s.key);if(t.some(i=>i===o||keyNames[i]===o))return e(s)})},rendererOptions=extend({patchProp},nodeOps);let renderer;function ensureRenderer(){return renderer||(renderer=createRenderer(rendererOptions))}const createApp=(...e)=>{const t=ensureRenderer().createApp(...e),{mount:n}=t;return t.mount=r=>{const s=normalizeContainer(r);if(!s)return;const o=t._component;!isFunction$1(o)&&!o.render&&!o.template&&(o.template=s.innerHTML),s.nodeType===1&&(s.textContent="");const i=n(s,!1,resolveRootNamespace(s));return s instanceof Element&&(s.removeAttribute("v-cloak"),s.setAttribute("data-v-app","")),i},t};function resolveRootNamespace(e){if(e instanceof SVGElement)return"svg";if(typeof MathMLElement=="function"&&e instanceof MathMLElement)return"mathml"}function normalizeContainer(e){return isString(e)?document.querySelector(e):e}/*!
 * pinia v2.3.0
 * (c) 2024 Eduardo San Martin Morote
 * @license MIT
 */let activePinia;const setActivePinia=e=>activePinia=e,piniaSymbol=Symbol();function isPlainObject(e){return e&&typeof e=="object"&&Object.prototype.toString.call(e)==="[object Object]"&&typeof e.toJSON!="function"}var MutationType;(function(e){e.direct="direct",e.patchObject="patch object",e.patchFunction="patch function"})(MutationType||(MutationType={}));function createPinia(){const e=effectScope(!0),t=e.run(()=>ref({}));let n=[],r=[];const s=markRaw({install(o){setActivePinia(s),s._a=o,o.provide(piniaSymbol,s),o.config.globalProperties.$pinia=s,r.forEach(i=>n.push(i)),r=[]},use(o){return this._a?n.push(o):r.push(o),this},_p:n,_a:null,_e:e,_s:new Map,state:t});return s}const noop=()=>{};function addSubscription(e,t,n,r=noop){e.push(t);const s=()=>{const o=e.indexOf(t);o>-1&&(e.splice(o,1),r())};return!n&&getCurrentScope()&&onScopeDispose(s),s}function triggerSubscriptions(e,...t){e.slice().forEach(n=>{n(...t)})}const fallbackRunWithContext=e=>e(),ACTION_MARKER=Symbol(),ACTION_NAME=Symbol();function mergeReactiveObjects(e,t){e instanceof Map&&t instanceof Map?t.forEach((n,r)=>e.set(r,n)):e instanceof Set&&t instanceof Set&&t.forEach(e.add,e);for(const n in t){if(!t.hasOwnProperty(n))continue;const r=t[n],s=e[n];isPlainObject(s)&&isPlainObject(r)&&e.hasOwnProperty(n)&&!isRef(r)&&!isReactive(r)?e[n]=mergeReactiveObjects(s,r):e[n]=r}return e}const skipHydrateSymbol=Symbol();function shouldHydrate(e){return!isPlainObject(e)||!e.hasOwnProperty(skipHydrateSymbol)}const{assign}=Object;function isComputed(e){return!!(isRef(e)&&e.effect)}function createOptionsStore(e,t,n,r){const{state:s,actions:o,getters:i}=t,a=n.state.value[e];let c;function d(){a||(n.state.value[e]=s?s():{});const u=toRefs(n.state.value[e]);return assign(u,o,Object.keys(i||{}).reduce((h,b)=>(h[b]=markRaw(computed(()=>{setActivePinia(n);const S=n._s.get(e);return i[b].call(S,S)})),h),{}))}return c=createSetupStore(e,d,t,n,r,!0),c}function createSetupStore(e,t,n={},r,s,o){let i;const a=assign({actions:{}},n),c={deep:!0};let d,u,h=[],b=[],S;const I=r.state.value[e];!o&&!I&&(r.state.value[e]={}),ref({});let E;function A(k){let B;d=u=!1,typeof k=="function"?(k(r.state.value[e]),B={type:MutationType.patchFunction,storeId:e,events:S}):(mergeReactiveObjects(r.state.value[e],k),B={type:MutationType.patchObject,payload:k,storeId:e,events:S});const W=E=Symbol();nextTick().then(()=>{E===W&&(d=!0)}),u=!0,triggerSubscriptions(h,B,r.state.value[e])}const R=o?function(){const{state:B}=n,W=B?B():{};this.$patch(X=>{assign(X,W)})}:noop;function H(){i.stop(),h=[],b=[],r._s.delete(e)}const D=(k,B="")=>{if(ACTION_MARKER in k)return k[ACTION_NAME]=B,k;const W=function(){setActivePinia(r);const X=Array.from(arguments),Z=[],re=[];function ie(V){Z.push(V)}function ue(V){re.push(V)}triggerSubscriptions(b,{args:X,name:W[ACTION_NAME],store:C,after:ie,onError:ue});let U;try{U=k.apply(this&&this.$id===e?this:C,X)}catch(V){throw triggerSubscriptions(re,V),V}return U instanceof Promise?U.then(V=>(triggerSubscriptions(Z,V),V)).catch(V=>(triggerSubscriptions(re,V),Promise.reject(V))):(triggerSubscriptions(Z,U),U)};return W[ACTION_MARKER]=!0,W[ACTION_NAME]=B,W},N={_p:r,$id:e,$onAction:addSubscription.bind(null,b),$patch:A,$reset:R,$subscribe(k,B={}){const W=addSubscription(h,k,B.detached,()=>X()),X=i.run(()=>watch(()=>r.state.value[e],Z=>{(B.flush==="sync"?u:d)&&k({storeId:e,type:MutationType.direct,events:S},Z)},assign({},c,B)));return W},$dispose:H},C=reactive(N);r._s.set(e,C);const G=(r._a&&r._a.runWithContext||fallbackRunWithContext)(()=>r._e.run(()=>(i=effectScope()).run(()=>t({action:D}))));for(const k in G){const B=G[k];if(isRef(B)&&!isComputed(B)||isReactive(B))o||(I&&shouldHydrate(B)&&(isRef(B)?B.value=I[k]:mergeReactiveObjects(B,I[k])),r.state.value[e][k]=B);else if(typeof B=="function"){const W=D(B,k);G[k]=W,a.actions[k]=B}}return assign(C,G),assign(toRaw(C),G),Object.defineProperty(C,"$state",{get:()=>r.state.value[e],set:k=>{A(B=>{assign(B,k)})}}),r._p.forEach(k=>{assign(C,i.run(()=>k({store:C,app:r._a,pinia:r,options:a})))}),I&&o&&n.hydrate&&n.hydrate(C.$state,I),d=!0,u=!0,C}/*! #__NO_SIDE_EFFECTS__ */function defineStore(e,t,n){let r,s;const o=typeof t=="function";typeof e=="string"?(r=e,s=o?n:t):(s=e,r=e.id);function i(a,c){const d=hasInjectionContext();return a=a||(d?inject(piniaSymbol,null):null),a&&setActivePinia(a),a=activePinia,a._s.has(r)||(o?createSetupStore(r,t,s,a):createOptionsStore(r,s,a)),a._s.get(r)}return i.$id=r,i}const configProviderContextKey=Symbol(),defaultNamespace="el",statePrefix="is-",_bem=(e,t,n,r,s)=>{let o=`${e}-${t}`;return n&&(o+=`-${n}`),r&&(o+=`__${r}`),s&&(o+=`--${s}`),o},namespaceContextKey=Symbol("namespaceContextKey"),useGetDerivedNamespace=e=>{const t=getCurrentInstance()?inject(namespaceContextKey,ref(defaultNamespace)):ref(defaultNamespace);return computed(()=>unref(t)||defaultNamespace)},useNamespace=(e,t)=>{const n=useGetDerivedNamespace();return{namespace:n,b:(E="")=>_bem(n.value,e,E,"",""),e:E=>E?_bem(n.value,e,"",E,""):"",m:E=>E?_bem(n.value,e,"","",E):"",be:(E,A)=>E&&A?_bem(n.value,e,E,A,""):"",em:(E,A)=>E&&A?_bem(n.value,e,"",E,A):"",bm:(E,A)=>E&&A?_bem(n.value,e,E,"",A):"",bem:(E,A,R)=>E&&A&&R?_bem(n.value,e,E,A,R):"",is:(E,...A)=>{const R=A.length>=1?A[0]:!0;return E&&R?`${statePrefix}${E}`:""},cssVar:E=>{const A={};for(const R in E)E[R]&&(A[`--${n.value}-${R}`]=E[R]);return A},cssVarName:E=>`--${n.value}-${E}`,cssVarBlock:E=>{const A={};for(const R in E)E[R]&&(A[`--${n.value}-${e}-${R}`]=E[R]);return A},cssVarBlockName:E=>`--${n.value}-${e}-${E}`}};var freeGlobal=typeof global=="object"&&global&&global.Object===Object&&global,freeSelf=typeof self=="object"&&self&&self.Object===Object&&self,root=freeGlobal||freeSelf||Function("return this")(),Symbol$1=root.Symbol,objectProto$6=Object.prototype,hasOwnProperty$5=objectProto$6.hasOwnProperty,nativeObjectToString$1=objectProto$6.toString,symToStringTag$1=Symbol$1?Symbol$1.toStringTag:void 0;function getRawTag(e){var t=hasOwnProperty$5.call(e,symToStringTag$1),n=e[symToStringTag$1];try{e[symToStringTag$1]=void 0;var r=!0}catch{}var s=nativeObjectToString$1.call(e);return r&&(t?e[symToStringTag$1]=n:delete e[symToStringTag$1]),s}var objectProto$5=Object.prototype,nativeObjectToString=objectProto$5.toString;function objectToString(e){return nativeObjectToString.call(e)}var nullTag="[object Null]",undefinedTag="[object Undefined]",symToStringTag=Symbol$1?Symbol$1.toStringTag:void 0;function baseGetTag(e){return e==null?e===void 0?undefinedTag:nullTag:symToStringTag&&symToStringTag in Object(e)?getRawTag(e):objectToString(e)}function isObjectLike(e){return e!=null&&typeof e=="object"}var symbolTag="[object Symbol]";function isSymbol(e){return typeof e=="symbol"||isObjectLike(e)&&baseGetTag(e)==symbolTag}function arrayMap(e,t){for(var n=-1,r=e==null?0:e.length,s=Array(r);++n<r;)s[n]=t(e[n],n,e);return s}var isArray=Array.isArray,symbolProto=Symbol$1?Symbol$1.prototype:void 0,symbolToString=symbolProto?symbolProto.toString:void 0;function baseToString(e){if(typeof e=="string")return e;if(isArray(e))return arrayMap(e,baseToString)+"";if(isSymbol(e))return symbolToString?symbolToString.call(e):"";var t=e+"";return t=="0"&&1/e==-1/0?"-0":t}function isObject(e){var t=typeof e;return e!=null&&(t=="object"||t=="function")}function identity(e){return e}var asyncTag="[object AsyncFunction]",funcTag="[object Function]",genTag="[object GeneratorFunction]",proxyTag="[object Proxy]";function isFunction(e){if(!isObject(e))return!1;var t=baseGetTag(e);return t==funcTag||t==genTag||t==asyncTag||t==proxyTag}var coreJsData=root["__core-js_shared__"],maskSrcKey=function(){var e=/[^.]+$/.exec(coreJsData&&coreJsData.keys&&coreJsData.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}();function isMasked(e){return!!maskSrcKey&&maskSrcKey in e}var funcProto$1=Function.prototype,funcToString$1=funcProto$1.toString;function toSource(e){if(e!=null){try{return funcToString$1.call(e)}catch{}try{return e+""}catch{}}return""}var reRegExpChar=/[\\^$.*+?()[\]{}|]/g,reIsHostCtor=/^\[object .+?Constructor\]$/,funcProto=Function.prototype,objectProto$4=Object.prototype,funcToString=funcProto.toString,hasOwnProperty$4=objectProto$4.hasOwnProperty,reIsNative=RegExp("^"+funcToString.call(hasOwnProperty$4).replace(reRegExpChar,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");function baseIsNative(e){if(!isObject(e)||isMasked(e))return!1;var t=isFunction(e)?reIsNative:reIsHostCtor;return t.test(toSource(e))}function getValue(e,t){return e==null?void 0:e[t]}function getNative(e,t){var n=getValue(e,t);return baseIsNative(n)?n:void 0}function apply(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}var HOT_COUNT=800,HOT_SPAN=16,nativeNow=Date.now;function shortOut(e){var t=0,n=0;return function(){var r=nativeNow(),s=HOT_SPAN-(r-n);if(n=r,s>0){if(++t>=HOT_COUNT)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}function constant(e){return function(){return e}}var defineProperty=function(){try{var e=getNative(Object,"defineProperty");return e({},"",{}),e}catch{}}(),baseSetToString=defineProperty?function(e,t){return defineProperty(e,"toString",{configurable:!0,enumerable:!1,value:constant(t),writable:!0})}:identity,setToString=shortOut(baseSetToString),MAX_SAFE_INTEGER$1=9007199254740991,reIsUint=/^(?:0|[1-9]\d*)$/;function isIndex(e,t){var n=typeof e;return t=t??MAX_SAFE_INTEGER$1,!!t&&(n=="number"||n!="symbol"&&reIsUint.test(e))&&e>-1&&e%1==0&&e<t}function baseAssignValue(e,t,n){t=="__proto__"&&defineProperty?defineProperty(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function eq(e,t){return e===t||e!==e&&t!==t}var objectProto$3=Object.prototype,hasOwnProperty$3=objectProto$3.hasOwnProperty;function assignValue(e,t,n){var r=e[t];(!(hasOwnProperty$3.call(e,t)&&eq(r,n))||n===void 0&&!(t in e))&&baseAssignValue(e,t,n)}var nativeMax=Math.max;function overRest(e,t,n){return t=nativeMax(t===void 0?e.length-1:t,0),function(){for(var r=arguments,s=-1,o=nativeMax(r.length-t,0),i=Array(o);++s<o;)i[s]=r[t+s];s=-1;for(var a=Array(t+1);++s<t;)a[s]=r[s];return a[t]=n(i),apply(e,this,a)}}var MAX_SAFE_INTEGER=9007199254740991;function isLength(e){return typeof e=="number"&&e>-1&&e%1==0&&e<=MAX_SAFE_INTEGER}var argsTag="[object Arguments]";function baseIsArguments(e){return isObjectLike(e)&&baseGetTag(e)==argsTag}var objectProto$2=Object.prototype,hasOwnProperty$2=objectProto$2.hasOwnProperty,propertyIsEnumerable=objectProto$2.propertyIsEnumerable,isArguments=baseIsArguments(function(){return arguments}())?baseIsArguments:function(e){return isObjectLike(e)&&hasOwnProperty$2.call(e,"callee")&&!propertyIsEnumerable.call(e,"callee")},reIsDeepProp=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,reIsPlainProp=/^\w*$/;function isKey(e,t){if(isArray(e))return!1;var n=typeof e;return n=="number"||n=="symbol"||n=="boolean"||e==null||isSymbol(e)?!0:reIsPlainProp.test(e)||!reIsDeepProp.test(e)||t!=null&&e in Object(t)}var nativeCreate=getNative(Object,"create");function hashClear(){this.__data__=nativeCreate?nativeCreate(null):{},this.size=0}function hashDelete(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}var HASH_UNDEFINED$1="__lodash_hash_undefined__",objectProto$1=Object.prototype,hasOwnProperty$1=objectProto$1.hasOwnProperty;function hashGet(e){var t=this.__data__;if(nativeCreate){var n=t[e];return n===HASH_UNDEFINED$1?void 0:n}return hasOwnProperty$1.call(t,e)?t[e]:void 0}var objectProto=Object.prototype,hasOwnProperty=objectProto.hasOwnProperty;function hashHas(e){var t=this.__data__;return nativeCreate?t[e]!==void 0:hasOwnProperty.call(t,e)}var HASH_UNDEFINED="__lodash_hash_undefined__";function hashSet(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=nativeCreate&&t===void 0?HASH_UNDEFINED:t,this}function Hash(e){var t=-1,n=e==null?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}Hash.prototype.clear=hashClear;Hash.prototype.delete=hashDelete;Hash.prototype.get=hashGet;Hash.prototype.has=hashHas;Hash.prototype.set=hashSet;function listCacheClear(){this.__data__=[],this.size=0}function assocIndexOf(e,t){for(var n=e.length;n--;)if(eq(e[n][0],t))return n;return-1}var arrayProto=Array.prototype,splice=arrayProto.splice;function listCacheDelete(e){var t=this.__data__,n=assocIndexOf(t,e);if(n<0)return!1;var r=t.length-1;return n==r?t.pop():splice.call(t,n,1),--this.size,!0}function listCacheGet(e){var t=this.__data__,n=assocIndexOf(t,e);return n<0?void 0:t[n][1]}function listCacheHas(e){return assocIndexOf(this.__data__,e)>-1}function listCacheSet(e,t){var n=this.__data__,r=assocIndexOf(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this}function ListCache(e){var t=-1,n=e==null?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}ListCache.prototype.clear=listCacheClear;ListCache.prototype.delete=listCacheDelete;ListCache.prototype.get=listCacheGet;ListCache.prototype.has=listCacheHas;ListCache.prototype.set=listCacheSet;var Map$1=getNative(root,"Map");function mapCacheClear(){this.size=0,this.__data__={hash:new Hash,map:new(Map$1||ListCache),string:new Hash}}function isKeyable(e){var t=typeof e;return t=="string"||t=="number"||t=="symbol"||t=="boolean"?e!=="__proto__":e===null}function getMapData(e,t){var n=e.__data__;return isKeyable(t)?n[typeof t=="string"?"string":"hash"]:n.map}function mapCacheDelete(e){var t=getMapData(this,e).delete(e);return this.size-=t?1:0,t}function mapCacheGet(e){return getMapData(this,e).get(e)}function mapCacheHas(e){return getMapData(this,e).has(e)}function mapCacheSet(e,t){var n=getMapData(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this}function MapCache(e){var t=-1,n=e==null?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}MapCache.prototype.clear=mapCacheClear;MapCache.prototype.delete=mapCacheDelete;MapCache.prototype.get=mapCacheGet;MapCache.prototype.has=mapCacheHas;MapCache.prototype.set=mapCacheSet;var FUNC_ERROR_TEXT="Expected a function";function memoize(e,t){if(typeof e!="function"||t!=null&&typeof t!="function")throw new TypeError(FUNC_ERROR_TEXT);var n=function(){var r=arguments,s=t?t.apply(this,r):r[0],o=n.cache;if(o.has(s))return o.get(s);var i=e.apply(this,r);return n.cache=o.set(s,i)||o,i};return n.cache=new(memoize.Cache||MapCache),n}memoize.Cache=MapCache;var MAX_MEMOIZE_SIZE=500;function memoizeCapped(e){var t=memoize(e,function(r){return n.size===MAX_MEMOIZE_SIZE&&n.clear(),r}),n=t.cache;return t}var rePropName=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,reEscapeChar=/\\(\\)?/g,stringToPath=memoizeCapped(function(e){var t=[];return e.charCodeAt(0)===46&&t.push(""),e.replace(rePropName,function(n,r,s,o){t.push(s?o.replace(reEscapeChar,"$1"):r||n)}),t});function toString(e){return e==null?"":baseToString(e)}function castPath(e,t){return isArray(e)?e:isKey(e,t)?[e]:stringToPath(toString(e))}function toKey(e){if(typeof e=="string"||isSymbol(e))return e;var t=e+"";return t=="0"&&1/e==-1/0?"-0":t}function baseGet(e,t){t=castPath(t,e);for(var n=0,r=t.length;e!=null&&n<r;)e=e[toKey(t[n++])];return n&&n==r?e:void 0}function arrayPush(e,t){for(var n=-1,r=t.length,s=e.length;++n<r;)e[s+n]=t[n];return e}var spreadableSymbol=Symbol$1?Symbol$1.isConcatSpreadable:void 0;function isFlattenable(e){return isArray(e)||isArguments(e)||!!(spreadableSymbol&&e&&e[spreadableSymbol])}function baseFlatten(e,t,n,r,s){var o=-1,i=e.length;for(n||(n=isFlattenable),s||(s=[]);++o<i;){var a=e[o];n(a)?arrayPush(s,a):s[s.length]=a}return s}function flatten(e){var t=e==null?0:e.length;return t?baseFlatten(e):[]}function flatRest(e){return setToString(overRest(e,void 0,flatten),e+"")}function baseHasIn(e,t){return e!=null&&t in Object(e)}function hasPath(e,t,n){t=castPath(t,e);for(var r=-1,s=t.length,o=!1;++r<s;){var i=toKey(t[r]);if(!(o=e!=null&&n(e,i)))break;e=e[i]}return o||++r!=s?o:(s=e==null?0:e.length,!!s&&isLength(s)&&isIndex(i,s)&&(isArray(e)||isArguments(e)))}function hasIn(e,t){return e!=null&&hasPath(e,t,baseHasIn)}function fromPairs(e){for(var t=-1,n=e==null?0:e.length,r={};++t<n;){var s=e[t];r[s[0]]=s[1]}return r}function baseSet(e,t,n,r){if(!isObject(e))return e;t=castPath(t,e);for(var s=-1,o=t.length,i=o-1,a=e;a!=null&&++s<o;){var c=toKey(t[s]),d=n;if(c==="__proto__"||c==="constructor"||c==="prototype")return e;if(s!=i){var u=a[c];d=void 0,d===void 0&&(d=isObject(u)?u:isIndex(t[s+1])?[]:{})}assignValue(a,c,d),a=a[c]}return e}function basePickBy(e,t,n){for(var r=-1,s=t.length,o={};++r<s;){var i=t[r],a=baseGet(e,i);n(a,i)&&baseSet(o,castPath(i,e),a)}return o}function basePick(e,t){return basePickBy(e,t,function(n,r){return hasIn(e,r)})}var pick=flatRest(function(e,t){return e==null?{}:basePick(e,t)});const isUndefined=e=>e===void 0,isBoolean=e=>typeof e=="boolean",isNumber=e=>typeof e=="number",isStringNumber=e=>isString(e)?!Number.isNaN(Number(e)):!1;var __defProp$9=Object.defineProperty,__defProps$6=Object.defineProperties,__getOwnPropDescs$6=Object.getOwnPropertyDescriptors,__getOwnPropSymbols$b=Object.getOwnPropertySymbols,__hasOwnProp$b=Object.prototype.hasOwnProperty,__propIsEnum$b=Object.prototype.propertyIsEnumerable,__defNormalProp$9=(e,t,n)=>t in e?__defProp$9(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,__spreadValues$9=(e,t)=>{for(var n in t||(t={}))__hasOwnProp$b.call(t,n)&&__defNormalProp$9(e,n,t[n]);if(__getOwnPropSymbols$b)for(var n of __getOwnPropSymbols$b(t))__propIsEnum$b.call(t,n)&&__defNormalProp$9(e,n,t[n]);return e},__spreadProps$6=(e,t)=>__defProps$6(e,__getOwnPropDescs$6(t));function computedEager(e,t){var n;const r=shallowRef();return watchEffect(()=>{r.value=e()},__spreadProps$6(__spreadValues$9({},t),{flush:(n=void 0)!=null?n:"sync"})),readonly(r)}var _a;const isClient=typeof window<"u";isClient&&((_a=window==null?void 0:window.navigator)!=null&&_a.userAgent)&&/iP(ad|hone|od)/.test(window.navigator.userAgent);class ElementPlusError extends Error{constructor(t){super(t),this.name="ElementPlusError"}}function throwError(e,t){throw new ElementPlusError(`[${e}] ${t}`)}function debugWarn(e,t){}ref(0);const zIndexContextKey=Symbol("zIndexContextKey"),localeContextKey=Symbol("localeContextKey"),epPropKey="__epPropKey",definePropType=e=>e,isEpProp=e=>isObject$1(e)&&!!e[epPropKey],buildProp=(e,t)=>{if(!isObject$1(e)||isEpProp(e))return e;const{values:n,required:r,default:s,type:o,validator:i}=e,c={type:o,required:!!r,validator:n||i?d=>{let u=!1,h=[];if(n&&(h=Array.from(n),hasOwn(e,"default")&&h.push(s),u||(u=h.includes(d))),i&&(u||(u=i(d))),!u&&h.length>0){const b=[...new Set(h)].map(S=>JSON.stringify(S)).join(", ");warn(`Invalid prop: validation failed${t?` for prop "${t}"`:""}. Expected one of [${b}], got value ${JSON.stringify(d)}.`)}return u}:void 0,[epPropKey]:!0};return hasOwn(e,"default")&&(c.default=s),c},buildProps=e=>fromPairs(Object.entries(e).map(([t,n])=>[t,buildProp(n,t)])),componentSizes=["","default","small","large"],useSizeProp=buildProp({type:String,values:componentSizes,required:!1}),SIZE_INJECTION_KEY=Symbol("size"),useGlobalSize=()=>{const e=inject(SIZE_INJECTION_KEY,{});return computed(()=>unref(e.size)||"")},emptyValuesContextKey=Symbol("emptyValuesContextKey"),useEmptyValuesProps=buildProps({emptyValues:Array,valueOnClear:{type:[String,Number,Boolean,Function],default:void 0,validator:e=>isFunction$1(e)?!e():!e}}),keysOf=e=>Object.keys(e),globalConfig=ref();function useGlobalConfig(e,t=void 0){const n=getCurrentInstance()?inject(configProviderContextKey,globalConfig):globalConfig;return e?computed(()=>{var r,s;return(s=(r=n.value)==null?void 0:r[e])!=null?s:t}):n}const provideGlobalConfig=(e,t,n=!1)=>{var r;const s=!!getCurrentInstance(),o=s?useGlobalConfig():void 0,i=(r=void 0)!=null?r:s?provide:void 0;if(!i)return;const a=computed(()=>{const c=unref(e);return o!=null&&o.value?mergeConfig(o.value,c):c});return i(configProviderContextKey,a),i(localeContextKey,computed(()=>a.value.locale)),i(namespaceContextKey,computed(()=>a.value.namespace)),i(zIndexContextKey,computed(()=>a.value.zIndex)),i(SIZE_INJECTION_KEY,{size:computed(()=>a.value.size||"")}),i(emptyValuesContextKey,computed(()=>({emptyValues:a.value.emptyValues,valueOnClear:a.value.valueOnClear}))),(n||!globalConfig.value)&&(globalConfig.value=a.value),a},mergeConfig=(e,t)=>{const n=[...new Set([...keysOf(e),...keysOf(t)])],r={};for(const s of n)r[s]=t[s]!==void 0?t[s]:e[s];return r},UPDATE_MODEL_EVENT="update:modelValue",CHANGE_EVENT="change",INPUT_EVENT="input";var _export_sfc$1=(e,t)=>{const n=e.__vccOpts||e;for(const[r,s]of t)n[r]=s;return n};function addUnit(e,t="px"){if(!e)return"";if(isNumber(e)||isStringNumber(e))return`${e}${t}`;if(isString(e))return e}const withInstall=(e,t)=>{if(e.install=n=>{for(const r of[e,...Object.values(t??{})])n.component(r.name,r)},t)for(const[n,r]of Object.entries(t))e[n]=r;return e},withNoopInstall=e=>(e.install=NOOP,e),iconProps=buildProps({size:{type:definePropType([Number,String])},color:{type:String}}),__default__$3=defineComponent({name:"ElIcon",inheritAttrs:!1}),_sfc_main$5=defineComponent({...__default__$3,props:iconProps,setup(e){const t=e,n=useNamespace("icon"),r=computed(()=>{const{size:s,color:o}=t;return!s&&!o?{}:{fontSize:isUndefined(s)?void 0:addUnit(s),"--color":o}});return(s,o)=>(openBlock(),createElementBlock("i",mergeProps({class:unref(n).b(),style:unref(r)},s.$attrs),[renderSlot(s.$slots,"default")],16))}});var Icon=_export_sfc$1(_sfc_main$5,[["__file","icon.vue"]]);const ElIcon=withInstall(Icon);/*! Element Plus Icons Vue v2.3.1 */var loading_vue_vue_type_script_setup_true_lang_default=defineComponent({name:"Loading",__name:"loading",setup(e){return(t,n)=>(openBlock(),createElementBlock("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 1024 1024"},[createBaseVNode("path",{fill:"currentColor",d:"M512 64a32 32 0 0 1 32 32v192a32 32 0 0 1-64 0V96a32 32 0 0 1 32-32m0 640a32 32 0 0 1 32 32v192a32 32 0 1 1-64 0V736a32 32 0 0 1 32-32m448-192a32 32 0 0 1-32 32H736a32 32 0 1 1 0-64h192a32 32 0 0 1 32 32m-640 0a32 32 0 0 1-32 32H96a32 32 0 0 1 0-64h192a32 32 0 0 1 32 32M195.2 195.2a32 32 0 0 1 45.248 0L376.32 331.008a32 32 0 0 1-45.248 45.248L195.2 240.448a32 32 0 0 1 0-45.248zm452.544 452.544a32 32 0 0 1 45.248 0L828.8 783.552a32 32 0 0 1-45.248 45.248L647.744 692.992a32 32 0 0 1 0-45.248zM828.8 195.264a32 32 0 0 1 0 45.184L692.992 376.32a32 32 0 0 1-45.248-45.248l135.808-135.808a32 32 0 0 1 45.248 0m-452.544 452.48a32 32 0 0 1 0 45.248L240.448 828.8a32 32 0 0 1-45.248-45.248l135.808-135.808a32 32 0 0 1 45.248 0z"})]))}}),loading_default=loading_vue_vue_type_script_setup_true_lang_default;const iconPropType=definePropType([String,Object,Function]),ariaProps=buildProps({ariaLabel:String,ariaOrientation:{type:String,values:["horizontal","vertical","undefined"]},ariaControls:String}),useAriaProps=e=>pick(ariaProps,e),formContextKey=Symbol("formContextKey"),formItemContextKey=Symbol("formItemContextKey"),defaultIdInjection={prefix:Math.floor(Math.random()*1e4),current:0},ID_INJECTION_KEY=Symbol("elIdInjection"),useIdInjection=()=>getCurrentInstance()?inject(ID_INJECTION_KEY,defaultIdInjection):defaultIdInjection,useId=e=>{const t=useIdInjection(),n=useGetDerivedNamespace();return computedEager(()=>unref(e)||`${n.value}-id-${t.prefix}-${t.current++}`)},useFormItem=()=>{const e=inject(formContextKey,void 0),t=inject(formItemContextKey,void 0);return{form:e,formItem:t}},useFormItemInputId=(e,{formItemContext:t,disableIdGeneration:n,disableIdManagement:r})=>{n||(n=ref(!1)),r||(r=ref(!1));const s=ref();let o;const i=computed(()=>{var a;return!!(!(e.label||e.ariaLabel)&&t&&t.inputIds&&((a=t.inputIds)==null?void 0:a.length)<=1)});return onMounted(()=>{o=watch([toRef(e,"id"),n],([a,c])=>{const d=a??(c?void 0:useId().value);d!==s.value&&(t!=null&&t.removeInputId&&(s.value&&t.removeInputId(s.value),!(r!=null&&r.value)&&!c&&d&&t.addInputId(d)),s.value=d)},{immediate:!0})}),onUnmounted(()=>{o&&o(),t!=null&&t.removeInputId&&s.value&&t.removeInputId(s.value)}),{isLabeledByFormItem:i,inputId:s}},useProp=e=>{const t=getCurrentInstance();return computed(()=>{var n,r;return(r=(n=t==null?void 0:t.proxy)==null?void 0:n.$props)==null?void 0:r[e]})},useFormSize=(e,t={})=>{const n=ref(void 0),r=t.prop?n:useProp("size"),s=t.global?n:useGlobalSize(),o=t.form?{size:void 0}:inject(formContextKey,void 0),i=t.formItem?{size:void 0}:inject(formItemContextKey,void 0);return computed(()=>r.value||unref(e)||(i==null?void 0:i.size)||(o==null?void 0:o.size)||s.value||"")},useFormDisabled=e=>{const t=useProp("disabled"),n=inject(formContextKey,void 0);return computed(()=>t.value||unref(e)||(n==null?void 0:n.disabled)||!1)},buttonGroupContextKey=Symbol("buttonGroupContextKey"),useDeprecated=({from:e,replacement:t,scope:n,version:r,ref:s,type:o="API"},i)=>{watch(()=>unref(i),a=>{},{immediate:!0})},useButton=(e,t)=>{useDeprecated({from:"type.text",replacement:"link",version:"3.0.0",scope:"props",ref:"https://element-plus.org/en-US/component/button.html#button-attributes"},computed(()=>e.type==="text"));const n=inject(buttonGroupContextKey,void 0),r=useGlobalConfig("button"),{form:s}=useFormItem(),o=useFormSize(computed(()=>n==null?void 0:n.size)),i=useFormDisabled(),a=ref(),c=useSlots(),d=computed(()=>e.type||(n==null?void 0:n.type)||""),u=computed(()=>{var I,E,A;return(A=(E=e.autoInsertSpace)!=null?E:(I=r.value)==null?void 0:I.autoInsertSpace)!=null?A:!1}),h=computed(()=>e.tag==="button"?{ariaDisabled:i.value||e.loading,disabled:i.value||e.loading,autofocus:e.autofocus,type:e.nativeType}:{}),b=computed(()=>{var I;const E=(I=c.default)==null?void 0:I.call(c);if(u.value&&(E==null?void 0:E.length)===1){const A=E[0];if((A==null?void 0:A.type)===Text){const R=A.children;return new RegExp("^\\p{Unified_Ideograph}{2}$","u").test(R.trim())}}return!1});return{_disabled:i,_size:o,_type:d,_ref:a,_props:h,shouldAddSpace:b,handleClick:I=>{if(i.value||e.loading){I.stopPropagation();return}e.nativeType==="reset"&&(s==null||s.resetFields()),t("click",I)}}},buttonTypes=["default","primary","success","warning","info","danger","text",""],buttonNativeTypes=["button","submit","reset"],buttonProps=buildProps({size:useSizeProp,disabled:Boolean,type:{type:String,values:buttonTypes,default:""},icon:{type:iconPropType},nativeType:{type:String,values:buttonNativeTypes,default:"button"},loading:Boolean,loadingIcon:{type:iconPropType,default:()=>loading_default},plain:Boolean,text:Boolean,link:Boolean,bg:Boolean,autofocus:Boolean,round:Boolean,circle:Boolean,color:String,dark:Boolean,autoInsertSpace:{type:Boolean,default:void 0},tag:{type:definePropType([String,Object]),default:"button"}}),buttonEmits={click:e=>e instanceof MouseEvent};function bound01(e,t){isOnePointZero(e)&&(e="100%");var n=isPercentage(e);return e=t===360?e:Math.min(t,Math.max(0,parseFloat(e))),n&&(e=parseInt(String(e*t),10)/100),Math.abs(e-t)<1e-6?1:(t===360?e=(e<0?e%t+t:e%t)/parseFloat(String(t)):e=e%t/parseFloat(String(t)),e)}function clamp01(e){return Math.min(1,Math.max(0,e))}function isOnePointZero(e){return typeof e=="string"&&e.indexOf(".")!==-1&&parseFloat(e)===1}function isPercentage(e){return typeof e=="string"&&e.indexOf("%")!==-1}function boundAlpha(e){return e=parseFloat(e),(isNaN(e)||e<0||e>1)&&(e=1),e}function convertToPercentage(e){return e<=1?"".concat(Number(e)*100,"%"):e}function pad2(e){return e.length===1?"0"+e:String(e)}function rgbToRgb(e,t,n){return{r:bound01(e,255)*255,g:bound01(t,255)*255,b:bound01(n,255)*255}}function rgbToHsl(e,t,n){e=bound01(e,255),t=bound01(t,255),n=bound01(n,255);var r=Math.max(e,t,n),s=Math.min(e,t,n),o=0,i=0,a=(r+s)/2;if(r===s)i=0,o=0;else{var c=r-s;switch(i=a>.5?c/(2-r-s):c/(r+s),r){case e:o=(t-n)/c+(t<n?6:0);break;case t:o=(n-e)/c+2;break;case n:o=(e-t)/c+4;break}o/=6}return{h:o,s:i,l:a}}function hue2rgb(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+(t-e)*(6*n):n<1/2?t:n<2/3?e+(t-e)*(2/3-n)*6:e}function hslToRgb(e,t,n){var r,s,o;if(e=bound01(e,360),t=bound01(t,100),n=bound01(n,100),t===0)s=n,o=n,r=n;else{var i=n<.5?n*(1+t):n+t-n*t,a=2*n-i;r=hue2rgb(a,i,e+1/3),s=hue2rgb(a,i,e),o=hue2rgb(a,i,e-1/3)}return{r:r*255,g:s*255,b:o*255}}function rgbToHsv(e,t,n){e=bound01(e,255),t=bound01(t,255),n=bound01(n,255);var r=Math.max(e,t,n),s=Math.min(e,t,n),o=0,i=r,a=r-s,c=r===0?0:a/r;if(r===s)o=0;else{switch(r){case e:o=(t-n)/a+(t<n?6:0);break;case t:o=(n-e)/a+2;break;case n:o=(e-t)/a+4;break}o/=6}return{h:o,s:c,v:i}}function hsvToRgb(e,t,n){e=bound01(e,360)*6,t=bound01(t,100),n=bound01(n,100);var r=Math.floor(e),s=e-r,o=n*(1-t),i=n*(1-s*t),a=n*(1-(1-s)*t),c=r%6,d=[n,i,o,o,a,n][c],u=[a,n,n,i,o,o][c],h=[o,o,a,n,n,i][c];return{r:d*255,g:u*255,b:h*255}}function rgbToHex(e,t,n,r){var s=[pad2(Math.round(e).toString(16)),pad2(Math.round(t).toString(16)),pad2(Math.round(n).toString(16))];return r&&s[0].startsWith(s[0].charAt(1))&&s[1].startsWith(s[1].charAt(1))&&s[2].startsWith(s[2].charAt(1))?s[0].charAt(0)+s[1].charAt(0)+s[2].charAt(0):s.join("")}function rgbaToHex(e,t,n,r,s){var o=[pad2(Math.round(e).toString(16)),pad2(Math.round(t).toString(16)),pad2(Math.round(n).toString(16)),pad2(convertDecimalToHex(r))];return s&&o[0].startsWith(o[0].charAt(1))&&o[1].startsWith(o[1].charAt(1))&&o[2].startsWith(o[2].charAt(1))&&o[3].startsWith(o[3].charAt(1))?o[0].charAt(0)+o[1].charAt(0)+o[2].charAt(0)+o[3].charAt(0):o.join("")}function convertDecimalToHex(e){return Math.round(parseFloat(e)*255).toString(16)}function convertHexToDecimal(e){return parseIntFromHex(e)/255}function parseIntFromHex(e){return parseInt(e,16)}function numberInputToObject(e){return{r:e>>16,g:(e&65280)>>8,b:e&255}}var names={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",goldenrod:"#daa520",gold:"#ffd700",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavenderblush:"#fff0f5",lavender:"#e6e6fa",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"};function inputToRGB(e){var t={r:0,g:0,b:0},n=1,r=null,s=null,o=null,i=!1,a=!1;return typeof e=="string"&&(e=stringInputToObject(e)),typeof e=="object"&&(isValidCSSUnit(e.r)&&isValidCSSUnit(e.g)&&isValidCSSUnit(e.b)?(t=rgbToRgb(e.r,e.g,e.b),i=!0,a=String(e.r).substr(-1)==="%"?"prgb":"rgb"):isValidCSSUnit(e.h)&&isValidCSSUnit(e.s)&&isValidCSSUnit(e.v)?(r=convertToPercentage(e.s),s=convertToPercentage(e.v),t=hsvToRgb(e.h,r,s),i=!0,a="hsv"):isValidCSSUnit(e.h)&&isValidCSSUnit(e.s)&&isValidCSSUnit(e.l)&&(r=convertToPercentage(e.s),o=convertToPercentage(e.l),t=hslToRgb(e.h,r,o),i=!0,a="hsl"),Object.prototype.hasOwnProperty.call(e,"a")&&(n=e.a)),n=boundAlpha(n),{ok:i,format:e.format||a,r:Math.min(255,Math.max(t.r,0)),g:Math.min(255,Math.max(t.g,0)),b:Math.min(255,Math.max(t.b,0)),a:n}}var CSS_INTEGER="[-\\+]?\\d+%?",CSS_NUMBER="[-\\+]?\\d*\\.\\d+%?",CSS_UNIT="(?:".concat(CSS_NUMBER,")|(?:").concat(CSS_INTEGER,")"),PERMISSIVE_MATCH3="[\\s|\\(]+(".concat(CSS_UNIT,")[,|\\s]+(").concat(CSS_UNIT,")[,|\\s]+(").concat(CSS_UNIT,")\\s*\\)?"),PERMISSIVE_MATCH4="[\\s|\\(]+(".concat(CSS_UNIT,")[,|\\s]+(").concat(CSS_UNIT,")[,|\\s]+(").concat(CSS_UNIT,")[,|\\s]+(").concat(CSS_UNIT,")\\s*\\)?"),matchers={CSS_UNIT:new RegExp(CSS_UNIT),rgb:new RegExp("rgb"+PERMISSIVE_MATCH3),rgba:new RegExp("rgba"+PERMISSIVE_MATCH4),hsl:new RegExp("hsl"+PERMISSIVE_MATCH3),hsla:new RegExp("hsla"+PERMISSIVE_MATCH4),hsv:new RegExp("hsv"+PERMISSIVE_MATCH3),hsva:new RegExp("hsva"+PERMISSIVE_MATCH4),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/};function stringInputToObject(e){if(e=e.trim().toLowerCase(),e.length===0)return!1;var t=!1;if(names[e])e=names[e],t=!0;else if(e==="transparent")return{r:0,g:0,b:0,a:0,format:"name"};var n=matchers.rgb.exec(e);return n?{r:n[1],g:n[2],b:n[3]}:(n=matchers.rgba.exec(e),n?{r:n[1],g:n[2],b:n[3],a:n[4]}:(n=matchers.hsl.exec(e),n?{h:n[1],s:n[2],l:n[3]}:(n=matchers.hsla.exec(e),n?{h:n[1],s:n[2],l:n[3],a:n[4]}:(n=matchers.hsv.exec(e),n?{h:n[1],s:n[2],v:n[3]}:(n=matchers.hsva.exec(e),n?{h:n[1],s:n[2],v:n[3],a:n[4]}:(n=matchers.hex8.exec(e),n?{r:parseIntFromHex(n[1]),g:parseIntFromHex(n[2]),b:parseIntFromHex(n[3]),a:convertHexToDecimal(n[4]),format:t?"name":"hex8"}:(n=matchers.hex6.exec(e),n?{r:parseIntFromHex(n[1]),g:parseIntFromHex(n[2]),b:parseIntFromHex(n[3]),format:t?"name":"hex"}:(n=matchers.hex4.exec(e),n?{r:parseIntFromHex(n[1]+n[1]),g:parseIntFromHex(n[2]+n[2]),b:parseIntFromHex(n[3]+n[3]),a:convertHexToDecimal(n[4]+n[4]),format:t?"name":"hex8"}:(n=matchers.hex3.exec(e),n?{r:parseIntFromHex(n[1]+n[1]),g:parseIntFromHex(n[2]+n[2]),b:parseIntFromHex(n[3]+n[3]),format:t?"name":"hex"}:!1)))))))))}function isValidCSSUnit(e){return!!matchers.CSS_UNIT.exec(String(e))}var TinyColor=function(){function e(t,n){t===void 0&&(t=""),n===void 0&&(n={});var r;if(t instanceof e)return t;typeof t=="number"&&(t=numberInputToObject(t)),this.originalInput=t;var s=inputToRGB(t);this.originalInput=t,this.r=s.r,this.g=s.g,this.b=s.b,this.a=s.a,this.roundA=Math.round(100*this.a)/100,this.format=(r=n.format)!==null&&r!==void 0?r:s.format,this.gradientType=n.gradientType,this.r<1&&(this.r=Math.round(this.r)),this.g<1&&(this.g=Math.round(this.g)),this.b<1&&(this.b=Math.round(this.b)),this.isValid=s.ok}return e.prototype.isDark=function(){return this.getBrightness()<128},e.prototype.isLight=function(){return!this.isDark()},e.prototype.getBrightness=function(){var t=this.toRgb();return(t.r*299+t.g*587+t.b*114)/1e3},e.prototype.getLuminance=function(){var t=this.toRgb(),n,r,s,o=t.r/255,i=t.g/255,a=t.b/255;return o<=.03928?n=o/12.92:n=Math.pow((o+.055)/1.055,2.4),i<=.03928?r=i/12.92:r=Math.pow((i+.055)/1.055,2.4),a<=.03928?s=a/12.92:s=Math.pow((a+.055)/1.055,2.4),.2126*n+.7152*r+.0722*s},e.prototype.getAlpha=function(){return this.a},e.prototype.setAlpha=function(t){return this.a=boundAlpha(t),this.roundA=Math.round(100*this.a)/100,this},e.prototype.isMonochrome=function(){var t=this.toHsl().s;return t===0},e.prototype.toHsv=function(){var t=rgbToHsv(this.r,this.g,this.b);return{h:t.h*360,s:t.s,v:t.v,a:this.a}},e.prototype.toHsvString=function(){var t=rgbToHsv(this.r,this.g,this.b),n=Math.round(t.h*360),r=Math.round(t.s*100),s=Math.round(t.v*100);return this.a===1?"hsv(".concat(n,", ").concat(r,"%, ").concat(s,"%)"):"hsva(".concat(n,", ").concat(r,"%, ").concat(s,"%, ").concat(this.roundA,")")},e.prototype.toHsl=function(){var t=rgbToHsl(this.r,this.g,this.b);return{h:t.h*360,s:t.s,l:t.l,a:this.a}},e.prototype.toHslString=function(){var t=rgbToHsl(this.r,this.g,this.b),n=Math.round(t.h*360),r=Math.round(t.s*100),s=Math.round(t.l*100);return this.a===1?"hsl(".concat(n,", ").concat(r,"%, ").concat(s,"%)"):"hsla(".concat(n,", ").concat(r,"%, ").concat(s,"%, ").concat(this.roundA,")")},e.prototype.toHex=function(t){return t===void 0&&(t=!1),rgbToHex(this.r,this.g,this.b,t)},e.prototype.toHexString=function(t){return t===void 0&&(t=!1),"#"+this.toHex(t)},e.prototype.toHex8=function(t){return t===void 0&&(t=!1),rgbaToHex(this.r,this.g,this.b,this.a,t)},e.prototype.toHex8String=function(t){return t===void 0&&(t=!1),"#"+this.toHex8(t)},e.prototype.toHexShortString=function(t){return t===void 0&&(t=!1),this.a===1?this.toHexString(t):this.toHex8String(t)},e.prototype.toRgb=function(){return{r:Math.round(this.r),g:Math.round(this.g),b:Math.round(this.b),a:this.a}},e.prototype.toRgbString=function(){var t=Math.round(this.r),n=Math.round(this.g),r=Math.round(this.b);return this.a===1?"rgb(".concat(t,", ").concat(n,", ").concat(r,")"):"rgba(".concat(t,", ").concat(n,", ").concat(r,", ").concat(this.roundA,")")},e.prototype.toPercentageRgb=function(){var t=function(n){return"".concat(Math.round(bound01(n,255)*100),"%")};return{r:t(this.r),g:t(this.g),b:t(this.b),a:this.a}},e.prototype.toPercentageRgbString=function(){var t=function(n){return Math.round(bound01(n,255)*100)};return this.a===1?"rgb(".concat(t(this.r),"%, ").concat(t(this.g),"%, ").concat(t(this.b),"%)"):"rgba(".concat(t(this.r),"%, ").concat(t(this.g),"%, ").concat(t(this.b),"%, ").concat(this.roundA,")")},e.prototype.toName=function(){if(this.a===0)return"transparent";if(this.a<1)return!1;for(var t="#"+rgbToHex(this.r,this.g,this.b,!1),n=0,r=Object.entries(names);n<r.length;n++){var s=r[n],o=s[0],i=s[1];if(t===i)return o}return!1},e.prototype.toString=function(t){var n=!!t;t=t??this.format;var r=!1,s=this.a<1&&this.a>=0,o=!n&&s&&(t.startsWith("hex")||t==="name");return o?t==="name"&&this.a===0?this.toName():this.toRgbString():(t==="rgb"&&(r=this.toRgbString()),t==="prgb"&&(r=this.toPercentageRgbString()),(t==="hex"||t==="hex6")&&(r=this.toHexString()),t==="hex3"&&(r=this.toHexString(!0)),t==="hex4"&&(r=this.toHex8String(!0)),t==="hex8"&&(r=this.toHex8String()),t==="name"&&(r=this.toName()),t==="hsl"&&(r=this.toHslString()),t==="hsv"&&(r=this.toHsvString()),r||this.toHexString())},e.prototype.toNumber=function(){return(Math.round(this.r)<<16)+(Math.round(this.g)<<8)+Math.round(this.b)},e.prototype.clone=function(){return new e(this.toString())},e.prototype.lighten=function(t){t===void 0&&(t=10);var n=this.toHsl();return n.l+=t/100,n.l=clamp01(n.l),new e(n)},e.prototype.brighten=function(t){t===void 0&&(t=10);var n=this.toRgb();return n.r=Math.max(0,Math.min(255,n.r-Math.round(255*-(t/100)))),n.g=Math.max(0,Math.min(255,n.g-Math.round(255*-(t/100)))),n.b=Math.max(0,Math.min(255,n.b-Math.round(255*-(t/100)))),new e(n)},e.prototype.darken=function(t){t===void 0&&(t=10);var n=this.toHsl();return n.l-=t/100,n.l=clamp01(n.l),new e(n)},e.prototype.tint=function(t){return t===void 0&&(t=10),this.mix("white",t)},e.prototype.shade=function(t){return t===void 0&&(t=10),this.mix("black",t)},e.prototype.desaturate=function(t){t===void 0&&(t=10);var n=this.toHsl();return n.s-=t/100,n.s=clamp01(n.s),new e(n)},e.prototype.saturate=function(t){t===void 0&&(t=10);var n=this.toHsl();return n.s+=t/100,n.s=clamp01(n.s),new e(n)},e.prototype.greyscale=function(){return this.desaturate(100)},e.prototype.spin=function(t){var n=this.toHsl(),r=(n.h+t)%360;return n.h=r<0?360+r:r,new e(n)},e.prototype.mix=function(t,n){n===void 0&&(n=50);var r=this.toRgb(),s=new e(t).toRgb(),o=n/100,i={r:(s.r-r.r)*o+r.r,g:(s.g-r.g)*o+r.g,b:(s.b-r.b)*o+r.b,a:(s.a-r.a)*o+r.a};return new e(i)},e.prototype.analogous=function(t,n){t===void 0&&(t=6),n===void 0&&(n=30);var r=this.toHsl(),s=360/n,o=[this];for(r.h=(r.h-(s*t>>1)+720)%360;--t;)r.h=(r.h+s)%360,o.push(new e(r));return o},e.prototype.complement=function(){var t=this.toHsl();return t.h=(t.h+180)%360,new e(t)},e.prototype.monochromatic=function(t){t===void 0&&(t=6);for(var n=this.toHsv(),r=n.h,s=n.s,o=n.v,i=[],a=1/t;t--;)i.push(new e({h:r,s,v:o})),o=(o+a)%1;return i},e.prototype.splitcomplement=function(){var t=this.toHsl(),n=t.h;return[this,new e({h:(n+72)%360,s:t.s,l:t.l}),new e({h:(n+216)%360,s:t.s,l:t.l})]},e.prototype.onBackground=function(t){var n=this.toRgb(),r=new e(t).toRgb(),s=n.a+r.a*(1-n.a);return new e({r:(n.r*n.a+r.r*r.a*(1-n.a))/s,g:(n.g*n.a+r.g*r.a*(1-n.a))/s,b:(n.b*n.a+r.b*r.a*(1-n.a))/s,a:s})},e.prototype.triad=function(){return this.polyad(3)},e.prototype.tetrad=function(){return this.polyad(4)},e.prototype.polyad=function(t){for(var n=this.toHsl(),r=n.h,s=[this],o=360/t,i=1;i<t;i++)s.push(new e({h:(r+i*o)%360,s:n.s,l:n.l}));return s},e.prototype.equals=function(t){return this.toRgbString()===new e(t).toRgbString()},e}();function darken(e,t=20){return e.mix("#141414",t).toString()}function useButtonCustomStyle(e){const t=useFormDisabled(),n=useNamespace("button");return computed(()=>{let r={},s=e.color;if(s){const o=s.match(/var\((.*?)\)/);o&&(s=window.getComputedStyle(window.document.documentElement).getPropertyValue(o[1]));const i=new TinyColor(s),a=e.dark?i.tint(20).toString():darken(i,20);if(e.plain)r=n.cssVarBlock({"bg-color":e.dark?darken(i,90):i.tint(90).toString(),"text-color":s,"border-color":e.dark?darken(i,50):i.tint(50).toString(),"hover-text-color":`var(${n.cssVarName("color-white")})`,"hover-bg-color":s,"hover-border-color":s,"active-bg-color":a,"active-text-color":`var(${n.cssVarName("color-white")})`,"active-border-color":a}),t.value&&(r[n.cssVarBlockName("disabled-bg-color")]=e.dark?darken(i,90):i.tint(90).toString(),r[n.cssVarBlockName("disabled-text-color")]=e.dark?darken(i,50):i.tint(50).toString(),r[n.cssVarBlockName("disabled-border-color")]=e.dark?darken(i,80):i.tint(80).toString());else{const c=e.dark?darken(i,30):i.tint(30).toString(),d=i.isDark()?`var(${n.cssVarName("color-white")})`:`var(${n.cssVarName("color-black")})`;if(r=n.cssVarBlock({"bg-color":s,"text-color":d,"border-color":s,"hover-bg-color":c,"hover-text-color":d,"hover-border-color":c,"active-bg-color":a,"active-border-color":a}),t.value){const u=e.dark?darken(i,50):i.tint(50).toString();r[n.cssVarBlockName("disabled-bg-color")]=u,r[n.cssVarBlockName("disabled-text-color")]=e.dark?"rgba(255, 255, 255, 0.5)":`var(${n.cssVarName("color-white")})`,r[n.cssVarBlockName("disabled-border-color")]=u}}}return r})}const __default__$2=defineComponent({name:"ElButton"}),_sfc_main$4=defineComponent({...__default__$2,props:buttonProps,emits:buttonEmits,setup(e,{expose:t,emit:n}){const r=e,s=useButtonCustomStyle(r),o=useNamespace("button"),{_ref:i,_size:a,_type:c,_disabled:d,_props:u,shouldAddSpace:h,handleClick:b}=useButton(r,n),S=computed(()=>[o.b(),o.m(c.value),o.m(a.value),o.is("disabled",d.value),o.is("loading",r.loading),o.is("plain",r.plain),o.is("round",r.round),o.is("circle",r.circle),o.is("text",r.text),o.is("link",r.link),o.is("has-bg",r.bg)]);return t({ref:i,size:a,type:c,disabled:d,shouldAddSpace:h}),(I,E)=>(openBlock(),createBlock(resolveDynamicComponent(I.tag),mergeProps({ref_key:"_ref",ref:i},unref(u),{class:unref(S),style:unref(s),onClick:unref(b)}),{default:withCtx(()=>[I.loading?(openBlock(),createElementBlock(Fragment,{key:0},[I.$slots.loading?renderSlot(I.$slots,"loading",{key:0}):(openBlock(),createBlock(unref(ElIcon),{key:1,class:normalizeClass(unref(o).is("loading"))},{default:withCtx(()=>[(openBlock(),createBlock(resolveDynamicComponent(I.loadingIcon)))]),_:1},8,["class"]))],64)):I.icon||I.$slots.icon?(openBlock(),createBlock(unref(ElIcon),{key:1},{default:withCtx(()=>[I.icon?(openBlock(),createBlock(resolveDynamicComponent(I.icon),{key:0})):renderSlot(I.$slots,"icon",{key:1})]),_:3})):createCommentVNode("v-if",!0),I.$slots.default?(openBlock(),createElementBlock("span",{key:2,class:normalizeClass({[unref(o).em("text","expand")]:unref(h)})},[renderSlot(I.$slots,"default")],2)):createCommentVNode("v-if",!0)]),_:3},16,["class","style","onClick"]))}});var Button=_export_sfc$1(_sfc_main$4,[["__file","button.vue"]]);const buttonGroupProps={size:buttonProps.size,type:buttonProps.type},__default__$1=defineComponent({name:"ElButtonGroup"}),_sfc_main$3=defineComponent({...__default__$1,props:buttonGroupProps,setup(e){const t=e;provide(buttonGroupContextKey,reactive({size:toRef(t,"size"),type:toRef(t,"type")}));const n=useNamespace("button");return(r,s)=>(openBlock(),createElementBlock("div",{class:normalizeClass(unref(n).b("group"))},[renderSlot(r.$slots,"default")],2))}});var ButtonGroup=_export_sfc$1(_sfc_main$3,[["__file","button-group.vue"]]);const ElButton=withInstall(Button,{ButtonGroup});withNoopInstall(ButtonGroup);const configProviderProps=buildProps({a11y:{type:Boolean,default:!0},locale:{type:definePropType(Object)},size:useSizeProp,button:{type:definePropType(Object)},experimentalFeatures:{type:definePropType(Object)},keyboardNavigation:{type:Boolean,default:!0},message:{type:definePropType(Object)},zIndex:Number,namespace:{type:String,default:"el"},...useEmptyValuesProps}),messageConfig={},ConfigProvider=defineComponent({name:"ElConfigProvider",props:configProviderProps,setup(e,{slots:t}){watch(()=>e.message,r=>{Object.assign(messageConfig,r??{})},{immediate:!0,deep:!0});const n=provideGlobalConfig(e);return()=>renderSlot(t,"default",{config:n==null?void 0:n.value})}}),ElConfigProvider=withInstall(ConfigProvider),isValidComponentSize=e=>["",...componentSizes].includes(e),switchProps=buildProps({modelValue:{type:[Boolean,String,Number],default:!1},disabled:Boolean,loading:Boolean,size:{type:String,validator:isValidComponentSize},width:{type:[String,Number],default:""},inlinePrompt:Boolean,inactiveActionIcon:{type:iconPropType},activeActionIcon:{type:iconPropType},activeIcon:{type:iconPropType},inactiveIcon:{type:iconPropType},activeText:{type:String,default:""},inactiveText:{type:String,default:""},activeValue:{type:[Boolean,String,Number],default:!0},inactiveValue:{type:[Boolean,String,Number],default:!1},name:{type:String,default:""},validateEvent:{type:Boolean,default:!0},beforeChange:{type:definePropType(Function)},id:String,tabindex:{type:[String,Number]},...useAriaProps(["ariaLabel"])}),switchEmits={[UPDATE_MODEL_EVENT]:e=>isBoolean(e)||isString(e)||isNumber(e),[CHANGE_EVENT]:e=>isBoolean(e)||isString(e)||isNumber(e),[INPUT_EVENT]:e=>isBoolean(e)||isString(e)||isNumber(e)},COMPONENT_NAME="ElSwitch",__default__=defineComponent({name:COMPONENT_NAME}),_sfc_main$2=defineComponent({...__default__,props:switchProps,emits:switchEmits,setup(e,{expose:t,emit:n}){const r=e,{formItem:s}=useFormItem(),o=useFormSize(),i=useNamespace("switch"),{inputId:a}=useFormItemInputId(r,{formItemContext:s}),c=useFormDisabled(computed(()=>r.loading)),d=ref(r.modelValue!==!1),u=ref(),h=ref(),b=computed(()=>[i.b(),i.m(o.value),i.is("disabled",c.value),i.is("checked",R.value)]),S=computed(()=>[i.e("label"),i.em("label","left"),i.is("active",!R.value)]),I=computed(()=>[i.e("label"),i.em("label","right"),i.is("active",R.value)]),E=computed(()=>({width:addUnit(r.width)}));watch(()=>r.modelValue,()=>{d.value=!0});const A=computed(()=>d.value?r.modelValue:!1),R=computed(()=>A.value===r.activeValue);[r.activeValue,r.inactiveValue].includes(A.value)||(n(UPDATE_MODEL_EVENT,r.inactiveValue),n(CHANGE_EVENT,r.inactiveValue),n(INPUT_EVENT,r.inactiveValue)),watch(R,C=>{var L;u.value.checked=C,r.validateEvent&&((L=s==null?void 0:s.validate)==null||L.call(s,"change").catch(G=>void 0))});const H=()=>{const C=R.value?r.inactiveValue:r.activeValue;n(UPDATE_MODEL_EVENT,C),n(CHANGE_EVENT,C),n(INPUT_EVENT,C),nextTick(()=>{u.value.checked=R.value})},D=()=>{if(c.value)return;const{beforeChange:C}=r;if(!C){H();return}const L=C();[isPromise(L),isBoolean(L)].includes(!0)||throwError(COMPONENT_NAME,"beforeChange must return type `Promise<boolean>` or `boolean`"),isPromise(L)?L.then(k=>{k&&H()}).catch(k=>{}):L&&H()},N=()=>{var C,L;(L=(C=u.value)==null?void 0:C.focus)==null||L.call(C)};return onMounted(()=>{u.value.checked=R.value}),t({focus:N,checked:R}),(C,L)=>(openBlock(),createElementBlock("div",{class:normalizeClass(unref(b)),onClick:withModifiers(D,["prevent"])},[createBaseVNode("input",{id:unref(a),ref_key:"input",ref:u,class:normalizeClass(unref(i).e("input")),type:"checkbox",role:"switch","aria-checked":unref(R),"aria-disabled":unref(c),"aria-label":C.ariaLabel,name:C.name,"true-value":C.activeValue,"false-value":C.inactiveValue,disabled:unref(c),tabindex:C.tabindex,onChange:H,onKeydown:withKeys(D,["enter"])},null,42,["id","aria-checked","aria-disabled","aria-label","name","true-value","false-value","disabled","tabindex","onKeydown"]),!C.inlinePrompt&&(C.inactiveIcon||C.inactiveText)?(openBlock(),createElementBlock("span",{key:0,class:normalizeClass(unref(S))},[C.inactiveIcon?(openBlock(),createBlock(unref(ElIcon),{key:0},{default:withCtx(()=>[(openBlock(),createBlock(resolveDynamicComponent(C.inactiveIcon)))]),_:1})):createCommentVNode("v-if",!0),!C.inactiveIcon&&C.inactiveText?(openBlock(),createElementBlock("span",{key:1,"aria-hidden":unref(R)},toDisplayString(C.inactiveText),9,["aria-hidden"])):createCommentVNode("v-if",!0)],2)):createCommentVNode("v-if",!0),createBaseVNode("span",{ref_key:"core",ref:h,class:normalizeClass(unref(i).e("core")),style:normalizeStyle(unref(E))},[C.inlinePrompt?(openBlock(),createElementBlock("div",{key:0,class:normalizeClass(unref(i).e("inner"))},[C.activeIcon||C.inactiveIcon?(openBlock(),createBlock(unref(ElIcon),{key:0,class:normalizeClass(unref(i).is("icon"))},{default:withCtx(()=>[(openBlock(),createBlock(resolveDynamicComponent(unref(R)?C.activeIcon:C.inactiveIcon)))]),_:1},8,["class"])):C.activeText||C.inactiveText?(openBlock(),createElementBlock("span",{key:1,class:normalizeClass(unref(i).is("text")),"aria-hidden":!unref(R)},toDisplayString(unref(R)?C.activeText:C.inactiveText),11,["aria-hidden"])):createCommentVNode("v-if",!0)],2)):createCommentVNode("v-if",!0),createBaseVNode("div",{class:normalizeClass(unref(i).e("action"))},[C.loading?(openBlock(),createBlock(unref(ElIcon),{key:0,class:normalizeClass(unref(i).is("loading"))},{default:withCtx(()=>[createVNode(unref(loading_default))]),_:1},8,["class"])):unref(R)?renderSlot(C.$slots,"active-action",{key:1},()=>[C.activeActionIcon?(openBlock(),createBlock(unref(ElIcon),{key:0},{default:withCtx(()=>[(openBlock(),createBlock(resolveDynamicComponent(C.activeActionIcon)))]),_:1})):createCommentVNode("v-if",!0)]):unref(R)?createCommentVNode("v-if",!0):renderSlot(C.$slots,"inactive-action",{key:2},()=>[C.inactiveActionIcon?(openBlock(),createBlock(unref(ElIcon),{key:0},{default:withCtx(()=>[(openBlock(),createBlock(resolveDynamicComponent(C.inactiveActionIcon)))]),_:1})):createCommentVNode("v-if",!0)])],2)],6),!C.inlinePrompt&&(C.activeIcon||C.activeText)?(openBlock(),createElementBlock("span",{key:1,class:normalizeClass(unref(I))},[C.activeIcon?(openBlock(),createBlock(unref(ElIcon),{key:0},{default:withCtx(()=>[(openBlock(),createBlock(resolveDynamicComponent(C.activeIcon)))]),_:1})):createCommentVNode("v-if",!0),!C.activeIcon&&C.activeText?(openBlock(),createElementBlock("span",{key:1,"aria-hidden":!unref(R)},toDisplayString(C.activeText),9,["aria-hidden"])):createCommentVNode("v-if",!0)],2)):createCommentVNode("v-if",!0)],10,["onClick"]))}});var Switch=_export_sfc$1(_sfc_main$2,[["__file","switch.vue"]]);const ElSwitch=withInstall(Switch),version="1.3.8",useVueAppStore=defineStore("vue-app",()=>{const e=shallowRef(void 0),t=shallowRef({});return{vueApp:e,chatApps:t}}),useWorldInfoStore=defineStore("world-info",()=>{const e=ref([]),t=ref({}),n=ref(0);return{worldInfo:e,vueBook:t,nextId:()=>(n.value++,n.value)}}),registerVarWorldInfo=(e,t)=>{const n=useWorldInfoStore();typeof t=="string"?n.worldInfo.push({predicate:e,name:t}):n.worldInfo.push({predicate:e,name:`func#${n.nextId()}`,entry:t})};var ExtensionPromptPosition=(e=>(e[e.AFTER_STORY=0]="AFTER_STORY",e[e.IN_CHAT=1]="IN_CHAT",e))(ExtensionPromptPosition||{}),ExtensionPromptRole=(e=>(e[e.SYSTEM=0]="SYSTEM",e[e.USER=1]="USER",e[e.ASSISTANT=2]="ASSISTANT",e))(ExtensionPromptRole||{}),EntryPosition=(e=>(e[e.BEFORE_CHAR_DEF=0]="BEFORE_CHAR_DEF",e[e.AFTER_CHAR_DEF=1]="AFTER_CHAR_DEF",e[e.BEFORE_AUTHOR_NOTE=2]="BEFORE_AUTHOR_NOTE",e[e.AFTER_AUTHOR_NOTE=3]="AFTER_AUTHOR_NOTE",e[e.IN_DEPTH=4]="IN_DEPTH",e[e.BEFORE_EXAMPLE_MES=5]="BEFORE_EXAMPLE_MES",e[e.AFTER_EXAMPLE_MES=6]="AFTER_EXAMPLE_MES",e))(EntryPosition||{});const reloadVueBook=e=>{const{vueBook:t}=useWorldInfoStore();for(const n in t)delete t[n];for(const n in e){const r=e[n],s=/^Vue-(.+)$/.exec(r.comment);if(s){const o=s[1];r.position==EntryPosition.IN_DEPTH&&r.role==ExtensionPromptRole.SYSTEM&&(t[o]={content:r.content,depth:r.depth})}}},cleanVue$1=()=>{var n;const e=useVueAppStore(),t=document.getElementById("vue-css");console.log("try cleanVue, vueCssElem:",t),(n=t==null?void 0:t.parentNode)==null||n.removeChild(t),e.vueApp=void 0,e.chatApps={}},reloadVue=async()=>{var e,t,n;const{settings}=useSettingsStore(),store=useVueAppStore();if(!settings.enabled)return;console.log("尝试重新加载vue");const context=getContext$1(),currentCharacter=context.characters[context.characterId];if(!currentCharacter){console.log("未找到角色"),cleanVue$1();return}const bookName=(t=(e=currentCharacter.data)==null?void 0:e.character_book)==null?void 0:t.name;if(!bookName){console.log("角色世界书不存在"),cleanVue$1();return}const bookEntries=(n=await loadWorldInfo(bookName))==null?void 0:n.entries;if(!bookEntries){console.log("读取角色世界书失败"),cleanVue$1();return}reloadVueBook(bookEntries);let jsContent,cssContent;for(const r in bookEntries){const s=bookEntries[r];s.comment=="vue-js"&&(jsContent=s.content),s.comment=="vue-css"&&(cssContent=s.content)}if(!jsContent||!cssContent){console.log("世界书中不存在vue前端"),cleanVue$1();return}console.log("找到vue-js和vue-css，尝试创建Vue APP"),window.acceptVueApp=r=>{store.vueApp=r},window.registerVarWorldInfo=registerVarWorldInfo,store.vueApp=void 0;try{eval(jsContent)}catch(r){console.log("创建Vue APP失败"),cleanVue$1();return}if(!store.vueApp){console.log("未发现Vue APP"),cleanVue$1();return}console.log("成功创建Vue APP");const styleElem=document.createElement("style");styleElem.id="vue-css",styleElem.textContent=cssContent,document.head.appendChild(styleElem),console.log("已挂载Vue APP对应的CSS文件"),store.chatApps={},console.log("已清空现有APP列表，准备重新渲染")},cleanVue=()=>{var n;const e=document.getElementById("chat");if(!e)return;const{chatApps:t}=useVueAppStore();for(const r of e.childNodes)if(r instanceof HTMLDivElement){if(!r.classList.contains("mes"))continue;const o=parseInt(((n=r.attributes.getNamedItem("mesid"))==null?void 0:n.value)??"-1");if(o<0)continue;const i=r.querySelector(".mes_block");if(!i)return;const a=i.querySelector(".mes_text");if(!a)return;a.hidden=!1;const c=i.querySelector(".vue-frontend-app");c&&(t[o].app.unmount(),c.remove())}for(const r in t)delete t[r]};var MessageUpdateReason;(function(e){e[e.EDIT=0]="EDIT",e[e.SWIPE=1]="SWIPE",e[e.STREAM=2]="STREAM",e[e.STREAM_END=3]="STREAM_END",e[e.UNKNOWN=4]="UNKNOWN"})(MessageUpdateReason||(MessageUpdateReason={}));class FrontendEventEmitter{constructor(){ye(this,"listeners",{})}on(t,n){this.listeners[t]||(this.listeners[t]=new Set),this.listeners[t].add(n)}off(t,n){this.listeners[t]&&this.listeners[t].has(n)&&this.listeners[t].delete(n)}async emit(t,...n){this.listeners[t]&&await Promise.all(this.listeners[t].values().map(r=>r(...n)))}}const renderMessage=(e,t)=>n=>getContext$1().messageFormatting(n,e,!1,!1,t),messageVars=(e,t)=>()=>{const r=getContext$1().chat[e];let s=!0;return r.extra||(r.extra={},s=!1),r.extra.vueFrontendVars||(r.extra.vueFrontendVars={},s=!1),t&&t(s),r.extra.vueFrontendVars},handleVarChange=async e=>{const{worldInfo:t,vueBook:n}=useWorldInfoStore(),r=getContext$1();try{for(const s of t){const o=s.predicate(e);if(s.entry&&o){const i=s.entry(e);r.setExtensionPrompt(`Vue-${s.name}`,i.content,ExtensionPromptPosition.IN_CHAT,i.depth)}else if(s.name in n&&o){const i=n[s.name];r.setExtensionPrompt(`Vue-${s.name}`,i.content,ExtensionPromptPosition.IN_CHAT,i.depth)}else r.setExtensionPrompt(`Vue-${s.name}`,"",ExtensionPromptPosition.AFTER_STORY,0)}}catch(s){console.log(s)}},saveChat=e=>{const t=getContext$1(),n=t.chat,r=t.saveChat;return async()=>{if(e==n.length-1){handleVarChange(messageVars(e)),await r();return}let s=!1;for(let o=e;o<n.length;o++)if(!n[o].is_system&&!n[o].is_user){s=!0;break}s||(handleVarChange(messageVars(e)),await r())}},charsPath="/characters/",getCharAvatarPath=()=>{const e=getContext$1(),t=e.characterId,n=e.characters[t].avatar;if(!n)return"/img/ai4.png";const r=e.getThumbnailUrl("avatar",n),s=r.substring(r.lastIndexOf("=")+1);return charsPath+s},getRawChat=()=>{const e=getContext$1().chat,t=[];for(const n of e){const r=n.is_user?"user":"assistant";if(n.swipes&&n.swipe_id>=n.swipes.length)continue;const s=n.swipes?n.swipes[n.swipe_id]:n.mes;t.push({role:r,content:s})}return t},cardVars=()=>{const e=getContext$1(),t=e.characters[e.characterId];if(!t)return{};const n=t.data.extensions;return n.vueFrontendData||(n.vueFrontendData={}),n.vueFrontendData},saveCard=async()=>{const e=getContext$1(),t=cardVars();await e.writeExtensionField(e.characterId,"vueFrontendData",{...t})},createWrapperApi=(e,t,n)=>{e.provide("wrapperApi",{renderMessage:renderMessage(t,n),messageVars:messageVars(n),saveChat:saveChat(n),getVueBook:()=>useWorldInfoStore().vueBook,getUserName:()=>getContext$1().name1,getUserAvatarPath:()=>getUserAvatar(user_avatar),getCharAvatarPath,countTokens:(r,s)=>getContext$1().getTokenCountAsync(r,s),getRawChat,cardVars,saveCard})},renderSingleVueApp=async(e,t,n,r)=>{const{vueApp:s,chatApps:o}=useVueAppStore(),{settings:i}=useSettingsStore();if(!s||!i.enabled)return;const a=getContext$1(),c=n.querySelector(".mes_block");if(!c)return;const d=c.querySelector(".ch_name");if(!d)return;const u=c.querySelector(".mes_text");if(!u)return;u.hidden=!0;const h=c.querySelector(".vue-frontend-app");if(h instanceof HTMLDivElement){h.hidden=!1,await o[e].emitter.emit("messageUpdated",t,r);return}const b=s();b.provide("extensionVersion",version),b.provide("initialMessage",t);const S=document.createElement("div");S.classList.add("vue-frontend-app"),S.style.paddingRight="30px",d.insertAdjacentElement("afterend",S);const I=new FrontendEventEmitter;o[e]={app:b,emitter:I},b.provide("frontendEventEmitter",I),b.provide("tavernContext",getContext$1),createWrapperApi(b,a.characters[a.characterId].name,e),b.mount(S),new MutationObserver(()=>{const A=document.getElementById("curEditTextarea");A&&A.parentNode==u&&(u.hidden=!1,S.hidden=!0)}).observe(u,{childList:!0,subtree:!0,characterData:!0})},getContent=(e,t)=>{let n="";const r=e[t];return r.swipe_id?n=r.swipes[r.swipe_id]??"...":n=e[t].mes,n},renderVue=async e=>{var r;const t=getContext$1().chat,n=document.getElementById("chat");if(n){for(const s of n.childNodes)if(s instanceof HTMLDivElement){if(!s.classList.contains("mes"))continue;const i=s.attributes.getNamedItem("is_user"),a=s.attributes.getNamedItem("is_system");if(!i||!a)continue;const c=i.value,d=a.value;if(c=="true"||d=="true")continue;const u=parseInt(((r=s.attributes.getNamedItem("mesid"))==null?void 0:r.value)??"-1");if(u<0)continue;console.log(`尝试渲染消息#${u}...`),await renderSingleVueApp(u,getContent(t,u),s,e)}}},useSettingsStore=defineStore("settings",()=>{const e=getContext$1(),n=reactive({enabled:!0});if(extension_settings["vue-frontend"]){const r=extension_settings["vue-frontend"];for(const s in r)n[s]=r[s]}return watch(n,async r=>{r.enabled?(await reloadVue(),renderVue(MessageUpdateReason.UNKNOWN)):cleanVue(),extension_settings["vue-frontend"]={...r},e.saveSettingsDebounced()}),{settings:n}}),uploadFrontend=async()=>{var e,t;try{let n=await window.showDirectoryPicker();n.name=="dist"&&(n=await n.getDirectoryHandle("assets"));let r,s;for await(const[d,u]of n.entries())d.startsWith("index")&&(d.endsWith(".css")&&(r=u),d.endsWith(".js")&&(s=u));if(!r||!s||r.kind!="file"||s.kind!="file")throw Error();const o=await r.getFile(),i=await s.getFile(),a=await o.text(),c=await i.text();try{const d=getContext$1(),u=d.characters[d.characterId];if(!u){alert("未找到角色");return}const h=(t=(e=u.data)==null?void 0:e.character_book)==null?void 0:t.name;if(!h){alert("角色世界书不存在，请先创建并绑定角色世界书");return}const b=await loadWorldInfo(h);if(!b){alert("读取角色世界书失败");return}console.log(b);let S,I;for(const A in b.entries){const R=b.entries[A];R.comment=="vue-css"&&(S=R),R.comment=="vue-js"&&(I=R)}if(S||(S=createWorldInfoEntry(h,b)),I||(I=createWorldInfoEntry(h,b)),!S||!I){alert("创建世界书条目失败");return}S.comment="vue-css",I.comment="vue-js",S.content=a,I.content=c,await saveWorldInfo(h,b);const{settings:E}=useSettingsStore();E.enabled&&(await reloadVue(),cleanVue(),renderVue(MessageUpdateReason.UNKNOWN)),alert("成功上传Vue前端")}catch(d){console.log("Err uploading vue frontend"),console.log(d),alert("未知问题")}}catch(n){console.log("Err uploading vue frontend"),console.log(n),alert("无法从指定文件夹上传Vue前端，请检查输入目录是否正确")}},_hoisted_1$1={class:"outer-container"},_hoisted_2$1={class:"dark"},_hoisted_3$1={class:"inner-container"},_hoisted_4={class:"switch-row"},_sfc_main$1=defineComponent({__name:"SettingPage",setup(e){const{settings:t}=useSettingsStore();return(n,r)=>{const s=ElSwitch,o=ElButton;return openBlock(),createElementBlock("div",_hoisted_1$1,[createBaseVNode("html",_hoisted_2$1,[createBaseVNode("div",_hoisted_3$1,[createBaseVNode("div",null,[createBaseVNode("small",null,"当前版本: v"+toDisplayString(unref(version)),1)]),createBaseVNode("div",_hoisted_4,[r[1]||(r[1]=createBaseVNode("div",{class:"text"},"启用",-1)),createVNode(s,{modelValue:unref(t).enabled,"onUpdate:modelValue":r[0]||(r[0]=i=>unref(t).enabled=i)},null,8,["modelValue"])]),createBaseVNode("div",null,[createVNode(o,{onClick:unref(uploadFrontend)},{default:withCtx(()=>r[2]||(r[2]=[createTextVNode("上传Vue前端到世界书")])),_:1},8,["onClick"])])])])])}}}),_export_sfc=(e,t)=>{const n=e.__vccOpts||e;for(const[r,s]of t)n[r]=s;return n},SettingPage=_export_sfc(_sfc_main$1,[["__scopeId","data-v-dbafd5ed"]]),updateLastMessage=async e=>{const t=document.getElementById("chat");if(!t)return;const n=t.querySelector(".last_mes");if(n instanceof HTMLDivElement){const r=n.attributes.getNamedItem("mesid");if(!r)return;const s=parseInt(r.value);await renderSingleVueApp(s,e,n,MessageUpdateReason.STREAM)}},emitVarEvent=async(e,t=!0)=>{const{settings:n}=useSettingsStore();if(!n.enabled)return;const r=useVueAppStore().chatApps[e];if(!r)return;const s=r.emitter,i=getContext$1().chat;let a;for(let d=e-1;d>=0;d--){const u=i[d];!u.is_user&&!u.is_system&&(a=d)}if(console.log("Try emit var event, mesId:",e,"last mesId:",a),a==null){await s.emit("initVariables",getContent(i,e));return}const c=messageVars(a)();await s.emit("updateVariables",c,getContent(i,e))},emitVarEvents=async(e=0,t=!0)=>{const r=getContext$1().chat;for(const[s,o]of r.entries())!o.is_system&&!o.is_user&&s>=e&&await emitVarEvent(s,t)},handlePrompt=async e=>{const{vueApp:t}=useVueAppStore();if(!t)return;const r=getContext$1().chat;for(let s=r.length-2;s>=0;s--){const o=r[s];if(!o.is_user&&!o.is_system){await useVueAppStore().chatApps[s].emitter.emit("promptReady",e.chat,e.dryRun);return}}},listenEvents=()=>{const{event_types:e,eventSource:t}=getContext$1(),n={[e.CHAT_CHANGED]:async()=>{await reloadVue(),await renderVue(MessageUpdateReason.UNKNOWN),await emitVarEvents()},[e.MESSAGE_DELETED]:async r=>{cleanVue(),await renderVue(MessageUpdateReason.UNKNOWN),await emitVarEvents(r-1)},[e.CHARACTER_MESSAGE_RENDERED]:async r=>{await renderVue(MessageUpdateReason.STREAM_END),await emitVarEvent(r)},[e.MESSAGE_UPDATED]:async r=>{await renderVue(MessageUpdateReason.EDIT),await emitVarEvents(r-1)},[e.MESSAGE_SWIPED]:async r=>{await renderVue(MessageUpdateReason.SWIPE),await emitVarEvent(r)},[e.STREAM_TOKEN_RECEIVED]:updateLastMessage,[e.CHAT_COMPLETION_PROMPT_READY]:handlePrompt,[e.GENERATION_ENDED]:async r=>{await renderVue(MessageUpdateReason.STREAM_END),await emitVarEvents(r)}};for(const r in n)t.on(r,async(...s)=>{const o=n[r];console.log("Vue frontend: SillyTavern event received:",r),console.log("args:",s),await o(...s)})},_hoisted_1={class:"example-extension-settings"},_hoisted_2={class:"inline-drawer"},_hoisted_3={class:"inline-drawer-content"},_sfc_main=defineComponent({__name:"App",setup(e){return onMounted(listenEvents),(t,n)=>{const r=ElConfigProvider;return openBlock(),createBlock(r,{namespace:"stv"},{default:withCtx(()=>[createBaseVNode("div",_hoisted_1,[createBaseVNode("div",_hoisted_2,[n[1]||(n[1]=createBaseVNode("div",{class:"inline-drawer-toggle inline-drawer-header"},[createBaseVNode("b",null,"Vue前端"),createBaseVNode("div",{class:"inline-drawer-icon fa-solid fa-circle-chevron-down down"})],-1)),createBaseVNode("div",_hoisted_3,[createVNode(SettingPage),n[0]||(n[0]=createBaseVNode("hr",{class:"sysHR"},null,-1))])])])]),_:1})}}}),extensionsSettingsElem=document.getElementById("extensions_settings"),settingDiv=document.createElement("div");settingDiv.id="vue-frontend-settings";const appElem=extensionsSettingsElem.appendChild(settingDiv),app=createApp(_sfc_main),pinia=createPinia();app.use(pinia);app.mount(appElem);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
